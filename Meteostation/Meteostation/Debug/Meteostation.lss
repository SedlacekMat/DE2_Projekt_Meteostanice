
Meteostation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00001af0  00001b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800180  00800180  00001c04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025cf  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df5  00000000  00000000  00004427  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c5  00000000  00000000  0000521c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000067e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b3  00000000  00000000  00006be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000110e  00000000  00000000  0000739b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000084a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_1>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_18>
      4c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_19>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	e9 01       	movw	r28, r18
      6a:	fd 01       	movw	r30, r26
      6c:	18 02       	muls	r17, r24
      6e:	33 02       	muls	r19, r19
      70:	4e 02       	muls	r20, r30
      72:	69 02       	muls	r22, r25
      74:	a4 02       	muls	r26, r20
      76:	df 02       	muls	r29, r31
      78:	1a 03       	fmul	r17, r18
      7a:	34 03       	mulsu	r19, r20

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 ef       	ldi	r30, 0xF0	; 240
      90:	fa e1       	ldi	r31, 0x1A	; 26
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 38       	cpi	r26, 0x80	; 128
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	a0 e8       	ldi	r26, 0x80	; 128
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 30       	cpi	r26, 0x00	; 0
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
      b2:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
      ba:	85 b1       	in	r24, 0x05	; 5
      bc:	88 60       	ori	r24, 0x08	; 8
      be:	85 b9       	out	0x05, r24	; 5
      c0:	85 e0       	ldi	r24, 0x05	; 5
      c2:	8a 95       	dec	r24
      c4:	f1 f7       	brne	.-4      	; 0xc2 <toggle_e+0x8>
      c6:	00 00       	nop
      c8:	85 b1       	in	r24, 0x05	; 5
      ca:	87 7f       	andi	r24, 0xF7	; 247
      cc:	85 b9       	out	0x05, r24	; 5
      ce:	08 95       	ret

000000d0 <lcd_write>:
      d0:	cf 93       	push	r28
      d2:	c8 2f       	mov	r28, r24
      d4:	66 23       	and	r22, r22
      d6:	21 f0       	breq	.+8      	; 0xe0 <lcd_write+0x10>
      d8:	85 b1       	in	r24, 0x05	; 5
      da:	81 60       	ori	r24, 0x01	; 1
      dc:	85 b9       	out	0x05, r24	; 5
      de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_write+0x16>
      e0:	85 b1       	in	r24, 0x05	; 5
      e2:	8e 7f       	andi	r24, 0xFE	; 254
      e4:	85 b9       	out	0x05, r24	; 5
      e6:	8a b1       	in	r24, 0x0a	; 10
      e8:	80 61       	ori	r24, 0x10	; 16
      ea:	8a b9       	out	0x0a, r24	; 10
      ec:	8a b1       	in	r24, 0x0a	; 10
      ee:	80 62       	ori	r24, 0x20	; 32
      f0:	8a b9       	out	0x0a, r24	; 10
      f2:	8a b1       	in	r24, 0x0a	; 10
      f4:	80 64       	ori	r24, 0x40	; 64
      f6:	8a b9       	out	0x0a, r24	; 10
      f8:	8a b1       	in	r24, 0x0a	; 10
      fa:	80 68       	ori	r24, 0x80	; 128
      fc:	8a b9       	out	0x0a, r24	; 10
      fe:	8b b1       	in	r24, 0x0b	; 11
     100:	8f 77       	andi	r24, 0x7F	; 127
     102:	8b b9       	out	0x0b, r24	; 11
     104:	8b b1       	in	r24, 0x0b	; 11
     106:	8f 7b       	andi	r24, 0xBF	; 191
     108:	8b b9       	out	0x0b, r24	; 11
     10a:	8b b1       	in	r24, 0x0b	; 11
     10c:	8f 7d       	andi	r24, 0xDF	; 223
     10e:	8b b9       	out	0x0b, r24	; 11
     110:	8b b1       	in	r24, 0x0b	; 11
     112:	8f 7e       	andi	r24, 0xEF	; 239
     114:	8b b9       	out	0x0b, r24	; 11
     116:	cc 23       	and	r28, r28
     118:	1c f4       	brge	.+6      	; 0x120 <lcd_write+0x50>
     11a:	8b b1       	in	r24, 0x0b	; 11
     11c:	80 68       	ori	r24, 0x80	; 128
     11e:	8b b9       	out	0x0b, r24	; 11
     120:	c6 ff       	sbrs	r28, 6
     122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x5a>
     124:	8b b1       	in	r24, 0x0b	; 11
     126:	80 64       	ori	r24, 0x40	; 64
     128:	8b b9       	out	0x0b, r24	; 11
     12a:	c5 ff       	sbrs	r28, 5
     12c:	03 c0       	rjmp	.+6      	; 0x134 <lcd_write+0x64>
     12e:	8b b1       	in	r24, 0x0b	; 11
     130:	80 62       	ori	r24, 0x20	; 32
     132:	8b b9       	out	0x0b, r24	; 11
     134:	c4 ff       	sbrs	r28, 4
     136:	03 c0       	rjmp	.+6      	; 0x13e <lcd_write+0x6e>
     138:	8b b1       	in	r24, 0x0b	; 11
     13a:	80 61       	ori	r24, 0x10	; 16
     13c:	8b b9       	out	0x0b, r24	; 11
     13e:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
     142:	8b b1       	in	r24, 0x0b	; 11
     144:	8f 77       	andi	r24, 0x7F	; 127
     146:	8b b9       	out	0x0b, r24	; 11
     148:	8b b1       	in	r24, 0x0b	; 11
     14a:	8f 7b       	andi	r24, 0xBF	; 191
     14c:	8b b9       	out	0x0b, r24	; 11
     14e:	8b b1       	in	r24, 0x0b	; 11
     150:	8f 7d       	andi	r24, 0xDF	; 223
     152:	8b b9       	out	0x0b, r24	; 11
     154:	8b b1       	in	r24, 0x0b	; 11
     156:	8f 7e       	andi	r24, 0xEF	; 239
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	c3 ff       	sbrs	r28, 3
     15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0x94>
     15e:	8b b1       	in	r24, 0x0b	; 11
     160:	80 68       	ori	r24, 0x80	; 128
     162:	8b b9       	out	0x0b, r24	; 11
     164:	c2 ff       	sbrs	r28, 2
     166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0x9e>
     168:	8b b1       	in	r24, 0x0b	; 11
     16a:	80 64       	ori	r24, 0x40	; 64
     16c:	8b b9       	out	0x0b, r24	; 11
     16e:	c1 ff       	sbrs	r28, 1
     170:	03 c0       	rjmp	.+6      	; 0x178 <lcd_write+0xa8>
     172:	8b b1       	in	r24, 0x0b	; 11
     174:	80 62       	ori	r24, 0x20	; 32
     176:	8b b9       	out	0x0b, r24	; 11
     178:	c0 ff       	sbrs	r28, 0
     17a:	03 c0       	rjmp	.+6      	; 0x182 <lcd_write+0xb2>
     17c:	8b b1       	in	r24, 0x0b	; 11
     17e:	80 61       	ori	r24, 0x10	; 16
     180:	8b b9       	out	0x0b, r24	; 11
     182:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
     186:	8b b1       	in	r24, 0x0b	; 11
     188:	80 61       	ori	r24, 0x10	; 16
     18a:	8b b9       	out	0x0b, r24	; 11
     18c:	8b b1       	in	r24, 0x0b	; 11
     18e:	80 62       	ori	r24, 0x20	; 32
     190:	8b b9       	out	0x0b, r24	; 11
     192:	8b b1       	in	r24, 0x0b	; 11
     194:	80 64       	ori	r24, 0x40	; 64
     196:	8b b9       	out	0x0b, r24	; 11
     198:	8b b1       	in	r24, 0x0b	; 11
     19a:	80 68       	ori	r24, 0x80	; 128
     19c:	8b b9       	out	0x0b, r24	; 11
     19e:	87 eb       	ldi	r24, 0xB7	; 183
     1a0:	9b e0       	ldi	r25, 0x0B	; 11
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write+0xd2>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write+0xd8>
     1a8:	00 00       	nop
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <lcd_command>:
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write>
     1b4:	08 95       	ret

000001b6 <lcd_data>:
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write>
     1bc:	08 95       	ret

000001be <lcd_gotoxy>:
     1be:	61 11       	cpse	r22, r1
     1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_gotoxy+0xc>
     1c2:	80 58       	subi	r24, 0x80	; 128
     1c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     1c8:	08 95       	ret
     1ca:	80 54       	subi	r24, 0x40	; 64
     1cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     1d0:	08 95       	ret

000001d2 <lcd_clrscr>:
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     1d8:	08 95       	ret

000001da <lcd_putc>:
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write>
     1e0:	08 95       	ret

000001e2 <lcd_puts>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	fc 01       	movw	r30, r24
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_puts+0xe>
     1ea:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
     1ee:	fe 01       	movw	r30, r28
     1f0:	ef 01       	movw	r28, r30
     1f2:	21 96       	adiw	r28, 0x01	; 1
     1f4:	80 81       	ld	r24, Z
     1f6:	81 11       	cpse	r24, r1
     1f8:	f8 cf       	rjmp	.-16     	; 0x1ea <lcd_puts+0x8>
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     200:	cf 93       	push	r28
     202:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     204:	84 b1       	in	r24, 0x04	; 4
     206:	81 60       	ori	r24, 0x01	; 1
     208:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     20a:	8a b1       	in	r24, 0x0a	; 10
     20c:	80 62       	ori	r24, 0x20	; 32
     20e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     210:	84 b1       	in	r24, 0x04	; 4
     212:	88 60       	ori	r24, 0x08	; 8
     214:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     216:	8a b1       	in	r24, 0x0a	; 10
     218:	80 61       	ori	r24, 0x10	; 16
     21a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     21c:	8a b1       	in	r24, 0x0a	; 10
     21e:	80 62       	ori	r24, 0x20	; 32
     220:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     222:	8a b1       	in	r24, 0x0a	; 10
     224:	80 64       	ori	r24, 0x40	; 64
     226:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     228:	8a b1       	in	r24, 0x0a	; 10
     22a:	80 68       	ori	r24, 0x80	; 128
     22c:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	99 ef       	ldi	r25, 0xF9	; 249
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x32>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x38>
     238:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     23a:	8b b1       	in	r24, 0x0b	; 11
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	80 61       	ori	r24, 0x10	; 16
     244:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     246:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
     24a:	8f e1       	ldi	r24, 0x1F	; 31
     24c:	9e e4       	ldi	r25, 0x4E	; 78
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x4e>
     252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x54>
     254:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     256:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0x5e>
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_init+0x64>
     264:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     266:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x6e>
     272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x74>
     274:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     276:	8b b1       	in	r24, 0x0b	; 11
     278:	8f 7e       	andi	r24, 0xEF	; 239
     27a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     27c:	0e 94 5d 00 	call	0xba	; 0xba <toggle_e>
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x84>
     288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x8a>
     28a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    lcd_clrscr();                  /* display clear                */
     298:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     29c:	86 e0       	ldi	r24, 0x06	; 6
     29e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     2a2:	8c 2f       	mov	r24, r28
     2a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
}/* lcd_init */
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <ADC_Init>:
char dateStr[11];//string variable with date data

void ADC_Init()										// ADC Initialization function
{

	ADCSRA |= 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 ;		// AVCC with external capacitor at AREF pin,  64 prescaler
     2ac:	ea e7       	ldi	r30, 0x7A	; 122
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	86 68       	ori	r24, 0x86	; 134
     2b4:	80 83       	st	Z, r24
	ADMUX = (1 << REFS0);
     2b6:	80 e4       	ldi	r24, 0x40	; 64
     2b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2bc:	08 95       	ret

000002be <ADC_Read>:
}

int ADC_Read(char channel)							// ADC Read function
{
	ADMUX = (1 << REFS0) | (channel & 0x07);		// set input channel to read
     2be:	87 70       	andi	r24, 0x07	; 7
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1<<ADSC);							// Start ADC conversion
     2c6:	ea e7       	ldi	r30, 0x7A	; 122
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));				        // Wait until conversion is completed
     2d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2d4:	86 fd       	sbrc	r24, 6
     2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <ADC_Read+0x12>

	return ADCW;									// Return ADC word
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     2dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     2e0:	08 95       	ret

000002e2 <main>:
	0b00000,
	0b00000
};

int main(void)
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	2c 97       	sbiw	r28, 0x0c	; 12
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
    // Initialize I2C (TWI)
    twi_init();
     2f6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
     2fa:	87 e6       	ldi	r24, 0x67	; 103
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 a4 07 	call	0xf48	; 0xf48 <uart_init>
	
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
     302:	8c e0       	ldi	r24, 0x0C	; 12
     304:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
	
	//load customCharacter
	lcd_command(1 << LCD_CGRAM);
     308:	80 e4       	ldi	r24, 0x40	; 64
     30a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
	for (uint8_t i = 0; i < 8; i++)
     30e:	10 e0       	ldi	r17, 0x00	; 0
     310:	08 c0       	rjmp	.+16     	; 0x322 <main+0x40>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
     312:	e1 2f       	mov	r30, r17
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	e0 50       	subi	r30, 0x00	; 0
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_data>
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
	
	//load customCharacter
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
     320:	1f 5f       	subi	r17, 0xFF	; 255
     322:	18 30       	cpi	r17, 0x08	; 8
     324:	b0 f3       	brcs	.-20     	; 0x312 <main+0x30>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	lcd_command(1 << LCD_DDRAM);
     326:	80 e8       	ldi	r24, 0x80	; 128
     328:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
	
	
	RTCsetup();
     32c:	0e 94 d4 06 	call	0xda8	; 0xda8 <RTCsetup>
	
	
	ADC_Init();
     330:	0e 94 56 01 	call	0x2ac	; 0x2ac <ADC_Init>
	
	DDRB |= (1<<PB1);											//Set port B1 & B2 to output
     334:	84 b1       	in	r24, 0x04	; 4
     336:	82 60       	ori	r24, 0x02	; 2
     338:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PB2);
     33a:	84 b1       	in	r24, 0x04	; 4
     33c:	84 60       	ori	r24, 0x04	; 4
     33e:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;													// Set timer1 count zero
     340:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     344:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 2499;												// Set TOP count for timer1 in ICR1 register
     348:	83 ec       	ldi	r24, 0xC3	; 195
     34a:	99 e0       	ldi	r25, 0x09	; 9
     34c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     350:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);				// Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM (inverting mode)
     354:	82 ea       	ldi	r24, 0xA2	; 162
     356:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);			// set clk/64 (from prescaler)
     35a:	8b e1       	ldi	r24, 0x1B	; 27
     35c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    
	// RTC variables
	DDRC = DDRC & ~(1<<buttonOk);
     360:	87 b1       	in	r24, 0x07	; 7
     362:	87 7f       	andi	r24, 0xF7	; 247
     364:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC | (1<<buttonOk);
     366:	88 b1       	in	r24, 0x08	; 8
     368:	88 60       	ori	r24, 0x08	; 8
     36a:	88 b9       	out	0x08, r24	; 8
	
	DDRB = DDRB & ~(1<<buttonUp);
     36c:	84 b1       	in	r24, 0x04	; 4
     36e:	8f 7e       	andi	r24, 0xEF	; 239
     370:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | (1<<buttonUp);
     372:	85 b1       	in	r24, 0x05	; 5
     374:	80 61       	ori	r24, 0x10	; 16
     376:	85 b9       	out	0x05, r24	; 5
	
	DDRB = DDRB & ~(1<<buttonDown);
     378:	84 b1       	in	r24, 0x04	; 4
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | (1<<buttonDown);
     37e:	85 b1       	in	r24, 0x05	; 5
     380:	80 62       	ori	r24, 0x20	; 32
     382:	85 b9       	out	0x05, r24	; 5
		uint8_t year1;
		uint8_t year10;
	} data;
	
    // Configure external interrupt INT0 on pin PD2
	EIMSK = (1<<INT0); //setting mask register
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	8d bb       	out	0x1d, r24	; 29
	EIFR = (1<<INTF0); //setting flag register
     388:	8c bb       	out	0x1c, r24	; 28
	EICRA = (1<<ISC01)|(1<<ISC00); // //setting request register
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>

    // Enables interrupts by setting the global interrupt mask
    sei();
     390:	78 94       	sei
	DDRB = DDRB & ~(1<<buttonDown);
	PORTB = PORTB | (1<<buttonDown);
	
	uint8_t button = 0;
	uint8_t lastButton = 0;
	uint8_t cycle = 0;
     392:	00 e0       	ldi	r16, 0x00	; 0
	
	DDRB = DDRB & ~(1<<buttonDown);
	PORTB = PORTB | (1<<buttonDown);
	
	uint8_t button = 0;
	uint8_t lastButton = 0;
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <main+0xb8>
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
	
	//load customCharacter
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
     398:	81 2f       	mov	r24, r17
   

    // Infinite loop
    while (1)
    {
		if (bit_is_clear(PINC, buttonOk))
     39a:	33 9b       	sbis	0x06, 3	; 6
     39c:	06 c0       	rjmp	.+12     	; 0x3aa <main+0xc8>
		{
			button=1;
		}
		else if (bit_is_clear(PINB, buttonUp))
     39e:	1c 9b       	sbis	0x03, 4	; 3
     3a0:	06 c0       	rjmp	.+12     	; 0x3ae <main+0xcc>
		{
			button=2;
		}
		else if (bit_is_clear(PINB, buttonDown))
     3a2:	1d 99       	sbic	0x03, 5	; 3
     3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <main+0xd0>
		{
			button=3;
     3a6:	13 e0       	ldi	r17, 0x03	; 3
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <main+0xd2>
    // Infinite loop
    while (1)
    {
		if (bit_is_clear(PINC, buttonOk))
		{
			button=1;
     3aa:	11 e0       	ldi	r17, 0x01	; 1
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <main+0xd2>
		}
		else if (bit_is_clear(PINB, buttonUp))
		{
			button=2;
     3ae:	12 e0       	ldi	r17, 0x02	; 2
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <main+0xd2>
		}
		else if (bit_is_clear(PINB, buttonDown))
		{
			button=3;
		}
		else button=0;
     3b2:	10 e0       	ldi	r17, 0x00	; 0
		
		if(button!=lastButton && button!=0)//if button was pressed
     3b4:	18 17       	cp	r17, r24
     3b6:	81 f3       	breq	.-32     	; 0x398 <main+0xb6>
     3b8:	11 23       	and	r17, r17
     3ba:	71 f3       	breq	.-36     	; 0x398 <main+0xb6>
		{
			switch(cycle) //setup sequence state machine
     3bc:	80 2f       	mov	r24, r16
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	8a 30       	cpi	r24, 0x0A	; 10
     3c2:	91 05       	cpc	r25, r1
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <main+0xe6>
     3c6:	85 c1       	rjmp	.+778    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     3c8:	fc 01       	movw	r30, r24
     3ca:	ec 5c       	subi	r30, 0xCC	; 204
     3cc:	ff 4f       	sbci	r31, 0xFF	; 255
     3ce:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__tablejump2__>
			{
				case 0://start
				lcd_clrscr(); //clear LCD
     3d2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clrscr>
				lcd_puts("Setup:");
     3d6:	81 e1       	ldi	r24, 0x11	; 17
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
				cli(); //disable all interrupts
     3de:	f8 94       	cli
				*TimePoint=getTimeDate();
     3e0:	e0 90 e6 01 	lds	r14, 0x01E6	; 0x8001e6 <TimePoint>
     3e4:	f0 90 e7 01 	lds	r15, 0x01E7	; 0x8001e7 <TimePoint+0x1>
     3e8:	0e 94 15 06 	call	0xc2a	; 0xc2a <getTimeDate>
     3ec:	f7 01       	movw	r30, r14
     3ee:	91 83       	std	Z+1, r25	; 0x01
     3f0:	80 83       	st	Z, r24
				
				if(button==ok) cycle = 1;
     3f2:	11 30       	cpi	r17, 0x01	; 1
     3f4:	09 f0       	breq	.+2      	; 0x3f8 <main+0x116>
     3f6:	6d c1       	rjmp	.+730    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     3f8:	5b c1       	rjmp	.+694    	; 0x6b0 <__EEPROM_REGION_LENGTH__+0x2b0>
				break;
				
				case 1://set seconds 1
				if(button==up)
     3fa:	12 30       	cpi	r17, 0x02	; 2
     3fc:	49 f4       	brne	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
				{
					if(data.sec1==9) data.sec1=0;
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	89 30       	cpi	r24, 0x09	; 9
     402:	11 f4       	brne	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     404:	19 82       	std	Y+1, r1	; 0x01
     406:	65 c1       	rjmp	.+714    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.sec1++;
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	61 c1       	rjmp	.+706    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     410:	13 30       	cpi	r17, 0x03	; 3
     412:	51 f4       	brne	.+20     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				{
					if(data.sec1==0) data.sec1=9;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	81 11       	cpse	r24, r1
     418:	03 c0       	rjmp	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41a:	89 e0       	ldi	r24, 0x09	; 9
     41c:	89 83       	std	Y+1, r24	; 0x01
     41e:	59 c1       	rjmp	.+690    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.sec1--;
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	81 50       	subi	r24, 0x01	; 1
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	55 c1       	rjmp	.+682    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 2;
     428:	11 30       	cpi	r17, 0x01	; 1
     42a:	09 f0       	breq	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42c:	52 c1       	rjmp	.+676    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     42e:	42 c1       	rjmp	.+644    	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
				break;
				case 2://set seconds 10
				if(button==up)
     430:	12 30       	cpi	r17, 0x02	; 2
     432:	49 f4       	brne	.+18     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				{
					if(data.sec10==5) data.sec10=0;
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	85 30       	cpi	r24, 0x05	; 5
     438:	11 f4       	brne	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     43a:	1a 82       	std	Y+2, r1	; 0x02
     43c:	4a c1       	rjmp	.+660    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.sec10++;
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	8f 5f       	subi	r24, 0xFF	; 255
     442:	8a 83       	std	Y+2, r24	; 0x02
     444:	46 c1       	rjmp	.+652    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     446:	13 30       	cpi	r17, 0x03	; 3
     448:	51 f4       	brne	.+20     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
				{
					if(data.sec10==0) data.sec10=5;
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	81 11       	cpse	r24, r1
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     450:	85 e0       	ldi	r24, 0x05	; 5
     452:	8a 83       	std	Y+2, r24	; 0x02
     454:	3e c1       	rjmp	.+636    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.sec10--;
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	81 50       	subi	r24, 0x01	; 1
     45a:	8a 83       	std	Y+2, r24	; 0x02
     45c:	3a c1       	rjmp	.+628    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 3;
     45e:	11 30       	cpi	r17, 0x01	; 1
     460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     462:	37 c1       	rjmp	.+622    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     464:	29 c1       	rjmp	.+594    	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
				break;
				
				case 3://set minutes 1
				if(button==up)
     466:	12 30       	cpi	r17, 0x02	; 2
     468:	49 f4       	brne	.+18     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
				{
					if(data.min1==9) data.min1=0;
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	89 30       	cpi	r24, 0x09	; 9
     46e:	11 f4       	brne	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     470:	1b 82       	std	Y+3, r1	; 0x03
     472:	2f c1       	rjmp	.+606    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.min1++;
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	8f 5f       	subi	r24, 0xFF	; 255
     478:	8b 83       	std	Y+3, r24	; 0x03
     47a:	2b c1       	rjmp	.+598    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     47c:	13 30       	cpi	r17, 0x03	; 3
     47e:	51 f4       	brne	.+20     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
				{
					if(data.min1==0) data.min1=9;
     480:	8b 81       	ldd	r24, Y+3	; 0x03
     482:	81 11       	cpse	r24, r1
     484:	03 c0       	rjmp	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     486:	89 e0       	ldi	r24, 0x09	; 9
     488:	8b 83       	std	Y+3, r24	; 0x03
     48a:	23 c1       	rjmp	.+582    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.min1--;
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	81 50       	subi	r24, 0x01	; 1
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	1f c1       	rjmp	.+574    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 4;
     494:	11 30       	cpi	r17, 0x01	; 1
     496:	09 f0       	breq	.+2      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     498:	1c c1       	rjmp	.+568    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     49a:	10 c1       	rjmp	.+544    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				break;
				
				case 4://set minutes 10
				if(button==up)
     49c:	12 30       	cpi	r17, 0x02	; 2
     49e:	49 f4       	brne	.+18     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
				{
					if(data.min10==5) data.min10=0;
     4a0:	8c 81       	ldd	r24, Y+4	; 0x04
     4a2:	85 30       	cpi	r24, 0x05	; 5
     4a4:	11 f4       	brne	.+4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4a6:	1c 82       	std	Y+4, r1	; 0x04
     4a8:	14 c1       	rjmp	.+552    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.min10++;
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	8f 5f       	subi	r24, 0xFF	; 255
     4ae:	8c 83       	std	Y+4, r24	; 0x04
     4b0:	10 c1       	rjmp	.+544    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     4b2:	13 30       	cpi	r17, 0x03	; 3
     4b4:	51 f4       	brne	.+20     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
				{
					if(data.min10==0) data.min10=5;
     4b6:	8c 81       	ldd	r24, Y+4	; 0x04
     4b8:	81 11       	cpse	r24, r1
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	8c 83       	std	Y+4, r24	; 0x04
     4c0:	08 c1       	rjmp	.+528    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.min10--;
     4c2:	8c 81       	ldd	r24, Y+4	; 0x04
     4c4:	81 50       	subi	r24, 0x01	; 1
     4c6:	8c 83       	std	Y+4, r24	; 0x04
     4c8:	04 c1       	rjmp	.+520    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 5;
     4ca:	11 30       	cpi	r17, 0x01	; 1
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4ce:	01 c1       	rjmp	.+514    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     4d0:	f7 c0       	rjmp	.+494    	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
				break;
				case 5://set hours
				if(button==up)
     4d2:	12 30       	cpi	r17, 0x02	; 2
     4d4:	c1 f4       	brne	.+48     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
				{
					if(data.hour1==9 && data.hour10<2)
     4d6:	8d 81       	ldd	r24, Y+5	; 0x05
     4d8:	89 30       	cpi	r24, 0x09	; 9
     4da:	41 f4       	brne	.+16     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4dc:	8e 81       	ldd	r24, Y+6	; 0x06
     4de:	82 30       	cpi	r24, 0x02	; 2
     4e0:	28 f4       	brcc	.+10     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
					{
						data.hour1=0;
     4e2:	1d 82       	std	Y+5, r1	; 0x05
						data.hour10++;
     4e4:	8e 81       	ldd	r24, Y+6	; 0x06
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	8e 83       	std	Y+6, r24	; 0x06
     4ea:	f3 c0       	rjmp	.+486    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else if(data.hour1>2 && data.hour10==2)
     4ec:	8d 81       	ldd	r24, Y+5	; 0x05
     4ee:	83 30       	cpi	r24, 0x03	; 3
     4f0:	30 f0       	brcs	.+12     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     4f2:	8e 81       	ldd	r24, Y+6	; 0x06
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	19 f4       	brne	.+6      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
					{
						data.hour1=0;
     4f8:	1d 82       	std	Y+5, r1	; 0x05
						data.hour10=0;
     4fa:	1e 82       	std	Y+6, r1	; 0x06
     4fc:	ea c0       	rjmp	.+468    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else data.hour1++;
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	8d 83       	std	Y+5, r24	; 0x05
     504:	e6 c0       	rjmp	.+460    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     506:	13 30       	cpi	r17, 0x03	; 3
     508:	d9 f4       	brne	.+54     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
				{
					if(data.hour1==0 && data.hour10>0)
     50a:	8d 81       	ldd	r24, Y+5	; 0x05
     50c:	81 11       	cpse	r24, r1
     50e:	09 c0       	rjmp	.+18     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     510:	8e 81       	ldd	r24, Y+6	; 0x06
     512:	88 23       	and	r24, r24
     514:	31 f0       	breq	.+12     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
					{
						data.hour1=9;
     516:	89 e0       	ldi	r24, 0x09	; 9
     518:	8d 83       	std	Y+5, r24	; 0x05
						data.hour10--;
     51a:	8e 81       	ldd	r24, Y+6	; 0x06
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	8e 83       	std	Y+6, r24	; 0x06
     520:	d8 c0       	rjmp	.+432    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else if(data.hour1==0 && data.hour10==0)
     522:	8d 81       	ldd	r24, Y+5	; 0x05
     524:	81 11       	cpse	r24, r1
     526:	08 c0       	rjmp	.+16     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     528:	8e 81       	ldd	r24, Y+6	; 0x06
     52a:	81 11       	cpse	r24, r1
     52c:	05 c0       	rjmp	.+10     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
					{
						data.hour1=3;
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	8d 83       	std	Y+5, r24	; 0x05
						data.hour10=2;
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	8e 83       	std	Y+6, r24	; 0x06
     536:	cd c0       	rjmp	.+410    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else data.hour1--;
     538:	8d 81       	ldd	r24, Y+5	; 0x05
     53a:	81 50       	subi	r24, 0x01	; 1
     53c:	8d 83       	std	Y+5, r24	; 0x05
     53e:	c9 c0       	rjmp	.+402    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 6;
     540:	11 30       	cpi	r17, 0x01	; 1
     542:	09 f0       	breq	.+2      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
     544:	c6 c0       	rjmp	.+396    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     546:	be c0       	rjmp	.+380    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
				break;
				
				case 6://set days
				if(button==up)
     548:	12 30       	cpi	r17, 0x02	; 2
     54a:	c1 f4       	brne	.+48     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
				{
					if(data.day1==9 && data.day10<3)
     54c:	8f 81       	ldd	r24, Y+7	; 0x07
     54e:	89 30       	cpi	r24, 0x09	; 9
     550:	41 f4       	brne	.+16     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     552:	88 85       	ldd	r24, Y+8	; 0x08
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	28 f4       	brcc	.+10     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
					{
						data.day1=0;
     558:	1f 82       	std	Y+7, r1	; 0x07
						data.day10++;
     55a:	88 85       	ldd	r24, Y+8	; 0x08
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	88 87       	std	Y+8, r24	; 0x08
     560:	b8 c0       	rjmp	.+368    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else if(data.day1>3 && data.day10==1)
     562:	8f 81       	ldd	r24, Y+7	; 0x07
     564:	84 30       	cpi	r24, 0x04	; 4
     566:	30 f0       	brcs	.+12     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
     568:	88 85       	ldd	r24, Y+8	; 0x08
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	19 f4       	brne	.+6      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
					{
						data.day1=0;
     56e:	1f 82       	std	Y+7, r1	; 0x07
						data.day10=0;
     570:	18 86       	std	Y+8, r1	; 0x08
     572:	af c0       	rjmp	.+350    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else data.day1++;
     574:	8f 81       	ldd	r24, Y+7	; 0x07
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	8f 83       	std	Y+7, r24	; 0x07
     57a:	ab c0       	rjmp	.+342    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     57c:	13 30       	cpi	r17, 0x03	; 3
     57e:	d9 f4       	brne	.+54     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
				{
					if(data.day1==0 && data.day10>0)
     580:	8f 81       	ldd	r24, Y+7	; 0x07
     582:	81 11       	cpse	r24, r1
     584:	09 c0       	rjmp	.+18     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     586:	88 85       	ldd	r24, Y+8	; 0x08
     588:	88 23       	and	r24, r24
     58a:	31 f0       	breq	.+12     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
					{
						data.day1=9;
     58c:	89 e0       	ldi	r24, 0x09	; 9
     58e:	8f 83       	std	Y+7, r24	; 0x07
						data.day10--;
     590:	88 85       	ldd	r24, Y+8	; 0x08
     592:	81 50       	subi	r24, 0x01	; 1
     594:	88 87       	std	Y+8, r24	; 0x08
     596:	9d c0       	rjmp	.+314    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else if(data.day1==0 && data.day10==0)
     598:	8f 81       	ldd	r24, Y+7	; 0x07
     59a:	81 11       	cpse	r24, r1
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     59e:	88 85       	ldd	r24, Y+8	; 0x08
     5a0:	81 11       	cpse	r24, r1
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
					{
						data.day1=1;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	8f 83       	std	Y+7, r24	; 0x07
						data.day10=3;
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	88 87       	std	Y+8, r24	; 0x08
     5ac:	92 c0       	rjmp	.+292    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else data.day1--;
     5ae:	8f 81       	ldd	r24, Y+7	; 0x07
     5b0:	81 50       	subi	r24, 0x01	; 1
     5b2:	8f 83       	std	Y+7, r24	; 0x07
     5b4:	8e c0       	rjmp	.+284    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 7;
     5b6:	11 30       	cpi	r17, 0x01	; 1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
     5ba:	8b c0       	rjmp	.+278    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     5bc:	85 c0       	rjmp	.+266    	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
				break;
				
				case 7://set months
				if(button==up)
     5be:	12 30       	cpi	r17, 0x02	; 2
     5c0:	c1 f4       	brne	.+48     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
				{
					if(data.month1==9 && data.month10<1)
     5c2:	89 85       	ldd	r24, Y+9	; 0x09
     5c4:	89 30       	cpi	r24, 0x09	; 9
     5c6:	41 f4       	brne	.+16     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
     5c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ca:	81 11       	cpse	r24, r1
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
					{
						data.month1=0;
     5ce:	19 86       	std	Y+9, r1	; 0x09
						data.month10++;
     5d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	8a 87       	std	Y+10, r24	; 0x0a
     5d6:	7d c0       	rjmp	.+250    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else if(data.month1>1 && data.month10==1)
     5d8:	89 85       	ldd	r24, Y+9	; 0x09
     5da:	82 30       	cpi	r24, 0x02	; 2
     5dc:	30 f0       	brcs	.+12     	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
     5de:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	19 f4       	brne	.+6      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
					{
						data.month1=0;
     5e4:	19 86       	std	Y+9, r1	; 0x09
						data.month10=0;
     5e6:	1a 86       	std	Y+10, r1	; 0x0a
     5e8:	74 c0       	rjmp	.+232    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else data.month1++;
     5ea:	89 85       	ldd	r24, Y+9	; 0x09
     5ec:	8f 5f       	subi	r24, 0xFF	; 255
     5ee:	89 87       	std	Y+9, r24	; 0x09
     5f0:	70 c0       	rjmp	.+224    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     5f2:	13 30       	cpi	r17, 0x03	; 3
     5f4:	d9 f4       	brne	.+54     	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
				{
					if(data.month1==0 && data.month10>0)
     5f6:	89 85       	ldd	r24, Y+9	; 0x09
     5f8:	81 11       	cpse	r24, r1
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
     5fc:	8a 85       	ldd	r24, Y+10	; 0x0a
     5fe:	88 23       	and	r24, r24
     600:	31 f0       	breq	.+12     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
					{
						data.month1=9;
     602:	89 e0       	ldi	r24, 0x09	; 9
     604:	89 87       	std	Y+9, r24	; 0x09
						data.month10--;
     606:	8a 85       	ldd	r24, Y+10	; 0x0a
     608:	81 50       	subi	r24, 0x01	; 1
     60a:	8a 87       	std	Y+10, r24	; 0x0a
     60c:	62 c0       	rjmp	.+196    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else if(data.month1==0 && data.month10==0)
     60e:	89 85       	ldd	r24, Y+9	; 0x09
     610:	81 11       	cpse	r24, r1
     612:	08 c0       	rjmp	.+16     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
     614:	8a 85       	ldd	r24, Y+10	; 0x0a
     616:	81 11       	cpse	r24, r1
     618:	05 c0       	rjmp	.+10     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
					{
						data.month1=2;
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	89 87       	std	Y+9, r24	; 0x09
						data.month10=1;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	8a 87       	std	Y+10, r24	; 0x0a
     622:	57 c0       	rjmp	.+174    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					}
					else data.month1--;
     624:	89 85       	ldd	r24, Y+9	; 0x09
     626:	81 50       	subi	r24, 0x01	; 1
     628:	89 87       	std	Y+9, r24	; 0x09
     62a:	53 c0       	rjmp	.+166    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 8;
     62c:	11 30       	cpi	r17, 0x01	; 1
     62e:	09 f0       	breq	.+2      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
     630:	50 c0       	rjmp	.+160    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     632:	4c c0       	rjmp	.+152    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
				break;
				
				case 8://set year 1
				if(button==up)
     634:	12 30       	cpi	r17, 0x02	; 2
     636:	49 f4       	brne	.+18     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
				{
					if(data.year1==9) data.year1=0;
     638:	8b 85       	ldd	r24, Y+11	; 0x0b
     63a:	89 30       	cpi	r24, 0x09	; 9
     63c:	11 f4       	brne	.+4      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
     63e:	1b 86       	std	Y+11, r1	; 0x0b
     640:	48 c0       	rjmp	.+144    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.year1++;
     642:	8b 85       	ldd	r24, Y+11	; 0x0b
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	8b 87       	std	Y+11, r24	; 0x0b
     648:	44 c0       	rjmp	.+136    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     64a:	13 30       	cpi	r17, 0x03	; 3
     64c:	51 f4       	brne	.+20     	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
				{
					if(data.year1==0) data.year1=9;
     64e:	8b 85       	ldd	r24, Y+11	; 0x0b
     650:	81 11       	cpse	r24, r1
     652:	03 c0       	rjmp	.+6      	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
     654:	89 e0       	ldi	r24, 0x09	; 9
     656:	8b 87       	std	Y+11, r24	; 0x0b
     658:	3c c0       	rjmp	.+120    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.year1--;
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	81 50       	subi	r24, 0x01	; 1
     65e:	8b 87       	std	Y+11, r24	; 0x0b
     660:	38 c0       	rjmp	.+112    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok) cycle = 9;
     662:	11 30       	cpi	r17, 0x01	; 1
     664:	b1 f5       	brne	.+108    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     666:	34 c0       	rjmp	.+104    	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
				break;
				
				case 9://set year 10
				if(button==up)
     668:	12 30       	cpi	r17, 0x02	; 2
     66a:	49 f4       	brne	.+18     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
				{
					if(data.year10==9) data.year10=0;
     66c:	8c 85       	ldd	r24, Y+12	; 0x0c
     66e:	89 30       	cpi	r24, 0x09	; 9
     670:	11 f4       	brne	.+4      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
     672:	1c 86       	std	Y+12, r1	; 0x0c
     674:	2e c0       	rjmp	.+92     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.year10++;
     676:	8c 85       	ldd	r24, Y+12	; 0x0c
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	8c 87       	std	Y+12, r24	; 0x0c
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==down)
     67e:	13 30       	cpi	r17, 0x03	; 3
     680:	51 f4       	brne	.+20     	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
				{
					if(data.year10==0) data.year10=9;
     682:	8c 85       	ldd	r24, Y+12	; 0x0c
     684:	81 11       	cpse	r24, r1
     686:	03 c0       	rjmp	.+6      	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
     688:	89 e0       	ldi	r24, 0x09	; 9
     68a:	8c 87       	std	Y+12, r24	; 0x0c
     68c:	22 c0       	rjmp	.+68     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
					else data.year10--;
     68e:	8c 85       	ldd	r24, Y+12	; 0x0c
     690:	81 50       	subi	r24, 0x01	; 1
     692:	8c 87       	std	Y+12, r24	; 0x0c
     694:	1e c0       	rjmp	.+60     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				}
				else if(button==ok)
     696:	11 30       	cpi	r17, 0x01	; 1
     698:	e1 f4       	brne	.+56     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				{
					
					setTimeDate(*TimePoint); //send all the data to RTC
     69a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <TimePoint>
     69e:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <TimePoint+0x1>
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	0e 94 8a 06 	call	0xd14	; 0xd14 <setTimeDate>
					sei(); //enable interrupts
     6aa:	78 94       	sei
					cycle = 0; //reset the state machine
     6ac:	00 e0       	ldi	r16, 0x00	; 0
     6ae:	11 c0       	rjmp	.+34     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				lcd_clrscr(); //clear LCD
				lcd_puts("Setup:");
				cli(); //disable all interrupts
				*TimePoint=getTimeDate();
				
				if(button==ok) cycle = 1;
     6b0:	01 e0       	ldi	r16, 0x01	; 1
     6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				else if(button==down)
				{
					if(data.sec1==0) data.sec1=9;
					else data.sec1--;
				}
				else if(button==ok) cycle = 2;
     6b4:	02 e0       	ldi	r16, 0x02	; 2
     6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				else if(button==down)
				{
					if(data.sec10==0) data.sec10=5;
					else data.sec10--;
				}
				else if(button==ok) cycle = 3;
     6b8:	03 e0       	ldi	r16, 0x03	; 3
     6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				else if(button==down)
				{
					if(data.min1==0) data.min1=9;
					else data.min1--;
				}
				else if(button==ok) cycle = 4;
     6bc:	04 e0       	ldi	r16, 0x04	; 4
     6be:	09 c0       	rjmp	.+18     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				else if(button==down)
				{
					if(data.min10==0) data.min10=5;
					else data.min10--;
				}
				else if(button==ok) cycle = 5;
     6c0:	05 e0       	ldi	r16, 0x05	; 5
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
						data.hour1=3;
						data.hour10=2;
					}
					else data.hour1--;
				}
				else if(button==ok) cycle = 6;
     6c4:	06 e0       	ldi	r16, 0x06	; 6
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
						data.day1=1;
						data.day10=3;
					}
					else data.day1--;
				}
				else if(button==ok) cycle = 7;
     6c8:	07 e0       	ldi	r16, 0x07	; 7
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
						data.month1=2;
						data.month10=1;
					}
					else data.month1--;
				}
				else if(button==ok) cycle = 8;
     6cc:	08 e0       	ldi	r16, 0x08	; 8
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
				else if(button==down)
				{
					if(data.year1==0) data.year1=9;
					else data.year1--;
				}
				else if(button==ok) cycle = 9;
     6d0:	09 e0       	ldi	r16, 0x09	; 9
				
			}
			
			//store the time from RTC in a string variable as hh:mm:ss
			sprintf(timeStr, "%i%i:%i%i:%i%i",data.hour10, data.hour1, data.min10
			,data.min1, data.sec10, data.sec1);
     6d2:	59 81       	ldd	r21, Y+1	; 0x01
     6d4:	4a 81       	ldd	r20, Y+2	; 0x02
     6d6:	3b 81       	ldd	r19, Y+3	; 0x03
				break;
				
			}
			
			//store the time from RTC in a string variable as hh:mm:ss
			sprintf(timeStr, "%i%i:%i%i:%i%i",data.hour10, data.hour1, data.min10
     6d8:	2c 81       	ldd	r18, Y+4	; 0x04
     6da:	9d 81       	ldd	r25, Y+5	; 0x05
     6dc:	8e 81       	ldd	r24, Y+6	; 0x06
     6de:	1f 92       	push	r1
     6e0:	5f 93       	push	r21
     6e2:	1f 92       	push	r1
     6e4:	4f 93       	push	r20
     6e6:	1f 92       	push	r1
     6e8:	3f 93       	push	r19
     6ea:	1f 92       	push	r1
     6ec:	2f 93       	push	r18
     6ee:	1f 92       	push	r1
     6f0:	9f 93       	push	r25
     6f2:	1f 92       	push	r1
     6f4:	8f 93       	push	r24
     6f6:	88 e1       	ldi	r24, 0x18	; 24
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	9f 93       	push	r25
     6fc:	8f 93       	push	r24
     6fe:	88 e0       	ldi	r24, 0x08	; 8
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <sprintf>
			,data.min1, data.sec10, data.sec1);
			//store the date from RTC in a string as dd.mm.yyyy
			sprintf(dateStr, "%i%i.%i%i.20%i%i", data.day10, data.day1, data.month10
			, data.month1, data.year10, data.year1);
     70a:	5b 85       	ldd	r21, Y+11	; 0x0b
     70c:	4c 85       	ldd	r20, Y+12	; 0x0c
     70e:	39 85       	ldd	r19, Y+9	; 0x09
			
			//store the time from RTC in a string variable as hh:mm:ss
			sprintf(timeStr, "%i%i:%i%i:%i%i",data.hour10, data.hour1, data.min10
			,data.min1, data.sec10, data.sec1);
			//store the date from RTC in a string as dd.mm.yyyy
			sprintf(dateStr, "%i%i.%i%i.20%i%i", data.day10, data.day1, data.month10
     710:	2a 85       	ldd	r18, Y+10	; 0x0a
     712:	9f 81       	ldd	r25, Y+7	; 0x07
     714:	88 85       	ldd	r24, Y+8	; 0x08
     716:	1f 92       	push	r1
     718:	5f 93       	push	r21
     71a:	1f 92       	push	r1
     71c:	4f 93       	push	r20
     71e:	1f 92       	push	r1
     720:	3f 93       	push	r19
     722:	1f 92       	push	r1
     724:	2f 93       	push	r18
     726:	1f 92       	push	r1
     728:	9f 93       	push	r25
     72a:	1f 92       	push	r1
     72c:	8f 93       	push	r24
     72e:	87 e2       	ldi	r24, 0x27	; 39
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	8f ec       	ldi	r24, 0xCF	; 207
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <sprintf>
			, data.month1, data.year10, data.year1);
			
			lcd_gotoxy(7, 0);
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	87 e0       	ldi	r24, 0x07	; 7
     750:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
			lcd_puts(timeStr); //display time  on LCD
     754:	88 e0       	ldi	r24, 0x08	; 8
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_gotoxy(5, 1);
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	85 e0       	ldi	r24, 0x05	; 5
     760:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
			lcd_puts(dateStr); //display date on LCD
     764:	8f ec       	ldi	r24, 0xCF	; 207
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			if(cycle==0) lcd_clrscr(); //clear LCD after setup
     76c:	01 11       	cpse	r16, r1
     76e:	14 ce       	rjmp	.-984    	; 0x398 <main+0xb6>
     770:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clrscr>
     774:	11 ce       	rjmp	.-990    	; 0x398 <main+0xb6>

00000776 <__vector_1>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(INT0_vect)
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	4f 93       	push	r20
     78a:	5f 93       	push	r21
     78c:	6f 93       	push	r22
     78e:	7f 93       	push	r23
     790:	8f 93       	push	r24
     792:	9f 93       	push	r25
     794:	af 93       	push	r26
     796:	bf 93       	push	r27
     798:	ef 93       	push	r30
     79a:	ff 93       	push	r31
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	c4 55       	subi	r28, 0x54	; 84
     7a6:	d1 09       	sbc	r29, r1
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	cd bf       	out	0x3d, r28	; 61
	char hum_string[9];
	char pres_string[33];
	char temp_string[33];
	char time_string[9] = "11:22:33"; //string variable with time data
     7ac:	89 e0       	ldi	r24, 0x09	; 9
     7ae:	e7 e7       	ldi	r30, 0x77	; 119
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	de 01       	movw	r26, r28
     7b4:	a4 5b       	subi	r26, 0xB4	; 180
     7b6:	bf 4f       	sbci	r27, 0xFF	; 255
     7b8:	01 90       	ld	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	8a 95       	dec	r24
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <__vector_1+0x42>
	uint16_t val = 0;
	
    static state_t state = STATE_PANELS;  // Current state of the FSM

    // FSM
    switch (state)
     7c0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	09 f4       	brne	.+2      	; 0x7ca <__vector_1+0x54>
     7c8:	a8 c0       	rjmp	.+336    	; 0x91a <__stack+0x1b>
     7ca:	30 f4       	brcc	.+12     	; 0x7d8 <__vector_1+0x62>
     7cc:	88 23       	and	r24, r24
     7ce:	69 f0       	breq	.+26     	; 0x7ea <__vector_1+0x74>
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <__vector_1+0x60>
     7d4:	7d c0       	rjmp	.+250    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
     7d6:	82 c1       	rjmp	.+772    	; 0xadc <__stack+0x1dd>
     7d8:	84 30       	cpi	r24, 0x04	; 4
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_1+0x68>
     7dc:	1c c1       	rjmp	.+568    	; 0xa16 <__stack+0x117>
     7de:	08 f4       	brcc	.+2      	; 0x7e2 <__vector_1+0x6c>
     7e0:	ee c0       	rjmp	.+476    	; 0x9be <__stack+0xbf>
     7e2:	85 30       	cpi	r24, 0x05	; 5
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <__vector_1+0x72>
     7e6:	49 c1       	rjmp	.+658    	; 0xa7a <__stack+0x17b>
     7e8:	79 c1       	rjmp	.+754    	; 0xadc <__stack+0x1dd>
    {
	case STATE_PANELS:
		if (ADC_Read(2)>310)					//do when value on light sensor is grater then 30%
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 5f 01 	call	0x2be	; 0x2be <ADC_Read>
     7f0:	87 33       	cpi	r24, 0x37	; 55
     7f2:	91 40       	sbci	r25, 0x01	; 1
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <__vector_1+0x82>
     7f6:	61 c0       	rjmp	.+194    	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
		{
			val = ((ADC_Read(0) - 340)/3.4);		//write ADC value to val & conversion to percentage
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	0e 94 5f 01 	call	0x2be	; 0x2be <ADC_Read>
     7fe:	84 55       	subi	r24, 0x54	; 84
     800:	91 40       	sbci	r25, 0x01	; 1
     802:	bc 01       	movw	r22, r24
     804:	99 0f       	add	r25, r25
     806:	88 0b       	sbc	r24, r24
     808:	99 0b       	sbc	r25, r25
     80a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__floatsisf>
     80e:	2a e9       	ldi	r18, 0x9A	; 154
     810:	39 e9       	ldi	r19, 0x99	; 153
     812:	49 e5       	ldi	r20, 0x59	; 89
     814:	50 e4       	ldi	r21, 0x40	; 64
     816:	0e 94 4e 08 	call	0x109c	; 0x109c <__divsf3>
     81a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fixunssfsi>
			OCR1A = 251 + (val*2.49);				//move with servo by percentage value
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 ef 08 	call	0x11de	; 0x11de <__floatunsisf>
     826:	29 e2       	ldi	r18, 0x29	; 41
     828:	3c e5       	ldi	r19, 0x5C	; 92
     82a:	4f e1       	ldi	r20, 0x1F	; 31
     82c:	50 e4       	ldi	r21, 0x40	; 64
     82e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	4b e7       	ldi	r20, 0x7B	; 123
     838:	53 e4       	ldi	r21, 0x43	; 67
     83a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__addsf3>
     83e:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fixunssfsi>
     842:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     846:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			val = ((ADC_Read(1) - 340)/3.4);
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0e 94 5f 01 	call	0x2be	; 0x2be <ADC_Read>
     850:	84 55       	subi	r24, 0x54	; 84
     852:	91 40       	sbci	r25, 0x01	; 1
     854:	bc 01       	movw	r22, r24
     856:	99 0f       	add	r25, r25
     858:	88 0b       	sbc	r24, r24
     85a:	99 0b       	sbc	r25, r25
     85c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__floatsisf>
     860:	2a e9       	ldi	r18, 0x9A	; 154
     862:	39 e9       	ldi	r19, 0x99	; 153
     864:	49 e5       	ldi	r20, 0x59	; 89
     866:	50 e4       	ldi	r21, 0x40	; 64
     868:	0e 94 4e 08 	call	0x109c	; 0x109c <__divsf3>
     86c:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fixunssfsi>
			OCR1B = 251 + (val*2.49);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 ef 08 	call	0x11de	; 0x11de <__floatunsisf>
     878:	29 e2       	ldi	r18, 0x29	; 41
     87a:	3c e5       	ldi	r19, 0x5C	; 92
     87c:	4f e1       	ldi	r20, 0x1F	; 31
     87e:	50 e4       	ldi	r21, 0x40	; 64
     880:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__mulsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	4b e7       	ldi	r20, 0x7B	; 123
     88a:	53 e4       	ldi	r21, 0x43	; 67
     88c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__addsf3>
     890:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fixunssfsi>
     894:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     898:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			lcd_gotoxy(15,0);                       //display a sun symbol on the LCD
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	8f e0       	ldi	r24, 0x0F	; 15
     8a0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
			lcd_putc(' ');
     8a4:	80 e2       	ldi	r24, 0x20	; 32
     8a6:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
			lcd_gotoxy(15,0);
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	8f e0       	ldi	r24, 0x0F	; 15
     8ae:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
			lcd_putc(0);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
		}
		else
		{
			lcd_gotoxy(15,0);                       //clear the sun symbol slot
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8f e0       	ldi	r24, 0x0F	; 15
     8be:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
			lcd_putc(' ');
     8c2:	80 e2       	ldi	r24, 0x20	; 32
     8c4:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
		}		
		state=STATE_READ;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		break;
     8ce:	08 c1       	rjmp	.+528    	; 0xae0 <__stack+0x1e1>
	
	case STATE_READ:
		humid_rel = get_humidity();                 // read all data
     8d0:	0e 94 8c 05 	call	0xb18	; 0xb18 <get_humidity>
     8d4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <humid_rel>
		press_hpa = get_pressure();
     8d8:	0e 94 a0 05 	call	0xb40	; 0xb40 <get_pressure>
     8dc:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <press_hpa>
     8e0:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <press_hpa+0x1>
     8e4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <press_hpa+0x2>
     8e8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <press_hpa+0x3>
		temp_c = get_temperature();
     8ec:	0e 94 d3 05 	call	0xba6	; 0xba6 <get_temperature>
     8f0:	60 93 81 01 	sts	0x0181, r22	; 0x800181 <temp_c>
     8f4:	70 93 82 01 	sts	0x0182, r23	; 0x800182 <temp_c+0x1>
     8f8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <temp_c+0x2>
     8fc:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <temp_c+0x3>
		*TimePoint = getTimeDate();
     900:	00 91 e6 01 	lds	r16, 0x01E6	; 0x8001e6 <TimePoint>
     904:	10 91 e7 01 	lds	r17, 0x01E7	; 0x8001e7 <TimePoint+0x1>
     908:	0e 94 15 06 	call	0xc2a	; 0xc2a <getTimeDate>
     90c:	f8 01       	movw	r30, r16
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
		state = STATE_TIME;
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		break;
     918:	e3 c0       	rjmp	.+454    	; 0xae0 <__stack+0x1e1>
		
	case STATE_TIME:
		//Convert time values
		sprintf(time_string,"%i%i:%i%i:%i%i",*(TimePoint+5),*(TimePoint+4),*(TimePoint+3),*(TimePoint+2),*(TimePoint+1),*(TimePoint));
     91a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <TimePoint>
     91e:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <TimePoint+0x1>
     922:	00 81       	ld	r16, Z
     924:	11 81       	ldd	r17, Z+1	; 0x01
     926:	a2 81       	ldd	r26, Z+2	; 0x02
     928:	b3 81       	ldd	r27, Z+3	; 0x03
     92a:	64 81       	ldd	r22, Z+4	; 0x04
     92c:	75 81       	ldd	r23, Z+5	; 0x05
     92e:	46 81       	ldd	r20, Z+6	; 0x06
     930:	57 81       	ldd	r21, Z+7	; 0x07
     932:	20 85       	ldd	r18, Z+8	; 0x08
     934:	31 85       	ldd	r19, Z+9	; 0x09
     936:	82 85       	ldd	r24, Z+10	; 0x0a
     938:	93 85       	ldd	r25, Z+11	; 0x0b
     93a:	1f 93       	push	r17
     93c:	0f 93       	push	r16
     93e:	bf 93       	push	r27
     940:	af 93       	push	r26
     942:	7f 93       	push	r23
     944:	6f 93       	push	r22
     946:	5f 93       	push	r21
     948:	4f 93       	push	r20
     94a:	3f 93       	push	r19
     94c:	2f 93       	push	r18
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	8e 01       	movw	r16, r28
     95c:	04 5b       	subi	r16, 0xB4	; 180
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	1f 93       	push	r17
     962:	0f 93       	push	r16
     964:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <sprintf>
		
		//Send to UART
		uart_puts("\r\nTime: ");
     968:	88 e3       	ldi	r24, 0x38	; 56
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		uart_puts(time_string);
     970:	c8 01       	movw	r24, r16
     972:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		uart_puts(";");
     976:	84 e5       	ldi	r24, 0x54	; 84
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		//Display on LCD
		lcd_gotoxy(0,0);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts("         ");
     986:	81 e4       	ldi	r24, 0x41	; 65
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_gotoxy(0,0);
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts(time_string);
     996:	c8 01       	movw	r24, r16
     998:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_gotoxy(5,0);
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts("   ");
     9a4:	87 e4       	ldi	r24, 0x47	; 71
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		//Next state
		state=STATE_HUMID;
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		break;
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	91 c0       	rjmp	.+290    	; 0xae0 <__stack+0x1e1>
		 
	case STATE_HUMID:
		//Convert humidity values
		utoa(humid_rel, hum_string, 10);
     9be:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <humid_rel>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     9c2:	4a e0       	ldi	r20, 0x0A	; 10
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__utoa_ncheck>
		//Send to UART
		uart_puts(" Hum: ");
     9d0:	8b e4       	ldi	r24, 0x4B	; 75
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		uart_puts(hum_string);
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		uart_puts(" %;");
     9e0:	82 e5       	ldi	r24, 0x52	; 82
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		//Display on LCD
		lcd_gotoxy(1,1);
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts("   ");
     9f0:	87 e4       	ldi	r24, 0x47	; 71
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_gotoxy(1,1);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts(hum_string);
     a00:	ce 01       	movw	r24, r28
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_putc('%');
     a08:	85 e2       	ldi	r24, 0x25	; 37
     a0a:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
		//Next state
		state = STATE_PRES;
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		break;
     a14:	65 c0       	rjmp	.+202    	; 0xae0 <__stack+0x1e1>
	
    case STATE_PRES:      	
		//Convert pressure to string
		ultoa(press_hpa,pres_string,10);
     a16:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <press_hpa>
     a1a:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <press_hpa+0x1>
     a1e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <press_hpa+0x2>
     a22:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <press_hpa+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
     a26:	2a e0       	ldi	r18, 0x0A	; 10
     a28:	ae 01       	movw	r20, r28
     a2a:	46 5f       	subi	r20, 0xF6	; 246
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	0e 94 40 0a 	call	0x1480	; 0x1480 <__ultoa_ncheck>
		//Send to UART
        uart_puts(" Pres: ");
     a32:	86 e5       	ldi	r24, 0x56	; 86
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
        uart_puts(pres_string);
     a3a:	ce 01       	movw	r24, r28
     a3c:	0a 96       	adiw	r24, 0x0a	; 10
     a3e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
        uart_puts(" hPa;");
     a42:	8e e5       	ldi	r24, 0x5E	; 94
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		//Display on LCD
		lcd_gotoxy(7,1);
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	87 e0       	ldi	r24, 0x07	; 7
     a4e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts("        ");
     a52:	82 e4       	ldi	r24, 0x42	; 66
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_gotoxy(7,1);
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	87 e0       	ldi	r24, 0x07	; 7
     a5e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts(pres_string);
     a62:	ce 01       	movw	r24, r28
     a64:	0a 96       	adiw	r24, 0x0a	; 10
     a66:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_puts(" hPa");
     a6a:	84 e6       	ldi	r24, 0x64	; 100
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		//Next state
        state=STATE_TEMP;
     a72:	85 e0       	ldi	r24, 0x05	; 5
     a74:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
        break;
     a78:	33 c0       	rjmp	.+102    	; 0xae0 <__stack+0x1e1>
    
    case STATE_TEMP:
		//Convert to string
		ltoa(temp_c,temp_string,10);
     a7a:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <temp_c>
     a7e:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <temp_c+0x1>
     a82:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <temp_c+0x2>
     a86:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <temp_c+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     a8a:	2a e0       	ldi	r18, 0x0A	; 10
     a8c:	ae 01       	movw	r20, r28
     a8e:	45 5d       	subi	r20, 0xD5	; 213
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	0e 94 31 0a 	call	0x1462	; 0x1462 <__ltoa_ncheck>
		//data communicated over UART
		uart_puts(" Temp: ");
     a96:	89 e6       	ldi	r24, 0x69	; 105
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		uart_puts(temp_string);
     a9e:	ce 01       	movw	r24, r28
     aa0:	8b 96       	adiw	r24, 0x2b	; 43
     aa2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		uart_puts(" C;");
     aa6:	81 e7       	ldi	r24, 0x71	; 113
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
		//display on LCD
		lcd_gotoxy(10,0);
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	8a e0       	ldi	r24, 0x0A	; 10
     ab2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts("    ");
     ab6:	86 e4       	ldi	r24, 0x46	; 70
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_gotoxy(10,0);
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
		lcd_puts(temp_string);
     ac6:	ce 01       	movw	r24, r28
     ac8:	8b 96       	adiw	r24, 0x2b	; 43
     aca:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		lcd_puts("C");
     ace:	85 e7       	ldi	r24, 0x75	; 117
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
		
              
       state=STATE_PANELS;
     ad6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>

        break;
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x1e1>
  
    default:
        state = STATE_PANELS;
     adc:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
        break;
    }
     ae0:	cc 5a       	subi	r28, 0xAC	; 172
     ae2:	df 4f       	sbci	r29, 0xFF	; 255
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	bf 91       	pop	r27
     af8:	af 91       	pop	r26
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	7f 91       	pop	r23
     b00:	6f 91       	pop	r22
     b02:	5f 91       	pop	r21
     b04:	4f 91       	pop	r20
     b06:	3f 91       	pop	r19
     b08:	2f 91       	pop	r18
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <get_humidity>:
 * Function: get_humidity()
 * Purpose:  Get humidity data from DHT12 sensor.
 * Returns:  Relative humidity as a percentage with +-1% precision
 **********************************************************************/
uint8_t get_humidity(void)
{
     b18:	cf 93       	push	r28
	uint8_t data = 0;
	twi_start((DHT12<<1) + TWI_WRITE);
     b1a:	88 eb       	ldi	r24, 0xB8	; 184
     b1c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(HUM_INT_REG);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	twi_stop();
     b26:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	twi_start((DHT12<<1) + TWI_READ);
     b2a:	89 eb       	ldi	r24, 0xB9	; 185
     b2c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	data = twi_read_nack();
     b30:	0e 94 3e 07 	call	0xe7c	; 0xe7c <twi_read_nack>
     b34:	c8 2f       	mov	r28, r24
	twi_stop();
     b36:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	return(data);	
}
     b3a:	8c 2f       	mov	r24, r28
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <get_pressure>:
 * Function: get_pressure()
 * Purpose:  Get pressure data from HP206C sensor.
 * Returns:  Absolute pressure in units hPA as a 20-bit unsigned integer stored as 32-bits
 **********************************************************************/
uint32_t get_pressure(void)
{
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
	uint32_t data = 0;
	twi_start((HP206C<<1) + TWI_WRITE);
     b48:	8c ee       	ldi	r24, 0xEC	; 236
     b4a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(PRES_MSB_REG);
     b4e:	80 e3       	ldi	r24, 0x30	; 48
     b50:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	twi_stop();
     b54:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	twi_start((HP206C<<1) + TWI_READ);
     b58:	8d ee       	ldi	r24, 0xED	; 237
     b5a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	uint8_t get4 = twi_read_ack()<<4;
     b5e:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
	data = get4<<12;
	data = data|(twi_read_ack()<<8);
     b62:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
     b66:	c8 2e       	mov	r12, r24
     b68:	d1 2c       	mov	r13, r1
     b6a:	dc 2c       	mov	r13, r12
     b6c:	cc 24       	eor	r12, r12
     b6e:	0d 2c       	mov	r0, r13
     b70:	00 0c       	add	r0, r0
     b72:	ee 08       	sbc	r14, r14
     b74:	ff 08       	sbc	r15, r15
	data = data|twi_read_nack();
     b76:	0e 94 3e 07 	call	0xe7c	; 0xe7c <twi_read_nack>
     b7a:	a7 01       	movw	r20, r14
     b7c:	96 01       	movw	r18, r12
     b7e:	28 2b       	or	r18, r24
     b80:	ca 01       	movw	r24, r20
     b82:	b9 01       	movw	r22, r18
	data = data/100;
     b84:	24 e6       	ldi	r18, 0x64	; 100
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__udivmodsi4>
     b90:	69 01       	movw	r12, r18
     b92:	7a 01       	movw	r14, r20
	twi_stop();
     b94:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	return(data);
}
     b98:	c7 01       	movw	r24, r14
     b9a:	b6 01       	movw	r22, r12
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	08 95       	ret

00000ba6 <get_temperature>:
 * Function: get_temperature()
 * Purpose:  Get temperature data from HP206C sensor.
 * Returns:  Temperature in degrees Celsius as a 20-bit signed integer stored as 32-bits
 **********************************************************************/
int32_t get_temperature()
{
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
	int32_t data = 0;
	twi_start((HP206C<<1) + TWI_WRITE);
     bae:	8c ee       	ldi	r24, 0xEC	; 236
     bb0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(TEMP_MSB_REG);
     bb4:	82 e3       	ldi	r24, 0x32	; 50
     bb6:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	twi_stop();
     bba:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	twi_start((HP206C<<1) + TWI_READ);
     bbe:	8d ee       	ldi	r24, 0xED	; 237
     bc0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	int8_t get4 = twi_read_ack()<<4;
     bc4:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
     bc8:	20 e1       	ldi	r18, 0x10	; 16
     bca:	82 9f       	mul	r24, r18
     bcc:	c0 01       	movw	r24, r0
     bce:	11 24       	eor	r1, r1
	data = get4<<12;
     bd0:	c8 2e       	mov	r12, r24
     bd2:	88 0f       	add	r24, r24
     bd4:	dd 08       	sbc	r13, r13
     bd6:	dc 2c       	mov	r13, r12
     bd8:	cc 24       	eor	r12, r12
     bda:	dd 0c       	add	r13, r13
     bdc:	dd 0c       	add	r13, r13
     bde:	dd 0c       	add	r13, r13
     be0:	dd 0c       	add	r13, r13
	data = data|(twi_read_ack()<<8);
     be2:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
     be6:	68 2f       	mov	r22, r24
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	76 2f       	mov	r23, r22
     bec:	66 27       	eor	r22, r22
     bee:	c6 2a       	or	r12, r22
     bf0:	d7 2a       	or	r13, r23
     bf2:	0d 2c       	mov	r0, r13
     bf4:	00 0c       	add	r0, r0
     bf6:	ee 08       	sbc	r14, r14
     bf8:	ff 08       	sbc	r15, r15
	data = data|twi_read_nack();
     bfa:	0e 94 3e 07 	call	0xe7c	; 0xe7c <twi_read_nack>
     bfe:	a7 01       	movw	r20, r14
     c00:	96 01       	movw	r18, r12
     c02:	28 2b       	or	r18, r24
     c04:	ca 01       	movw	r24, r20
     c06:	b9 01       	movw	r22, r18
	data = data/100;
     c08:	24 e6       	ldi	r18, 0x64	; 100
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__divmodsi4>
     c14:	69 01       	movw	r12, r18
     c16:	7a 01       	movw	r14, r20
	twi_stop();
     c18:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	return(data);
}
     c1c:	c7 01       	movw	r24, r14
     c1e:	b6 01       	movw	r22, r12
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	08 95       	ret

00000c2a <getTimeDate>:

#include "RTC.h"
#define RTC 0x68 //I2C address for the RTC

int getTimeDate() //this function pulls the time and date data from the RTC
{
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
	uint8_t temp;
	static int myArray[12];
	twi_start((RTC<<1)+TWI_WRITE);
     c2e:	80 ed       	ldi	r24, 0xD0	; 208
     c30:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(0x00);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	twi_start((RTC<<1)+TWI_READ);
     c3a:	81 ed       	ldi	r24, 0xD1	; 209
     c3c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	//get seconds
	temp=twi_read_ack();
     c40:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
	data.sec1=(temp & 0b00001111);
     c44:	ca ed       	ldi	r28, 0xDA	; 218
     c46:	d1 e0       	ldi	r29, 0x01	; 1
     c48:	98 2f       	mov	r25, r24
     c4a:	9f 70       	andi	r25, 0x0F	; 15
     c4c:	98 83       	st	Y, r25
	data.sec10=((temp & 0b01110000)>>4);
     c4e:	80 77       	andi	r24, 0x70	; 112
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	95 95       	asr	r25
     c54:	87 95       	ror	r24
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	95 95       	asr	r25
     c60:	87 95       	ror	r24
     c62:	89 83       	std	Y+1, r24	; 0x01
	//get minutes
	temp=twi_read_ack();
     c64:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
	data.min1=(temp & 0b00001111);
     c68:	98 2f       	mov	r25, r24
     c6a:	9f 70       	andi	r25, 0x0F	; 15
     c6c:	9a 83       	std	Y+2, r25	; 0x02
	data.min10=(((temp) & 0b01110000)>>4);
     c6e:	80 77       	andi	r24, 0x70	; 112
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	95 95       	asr	r25
     c74:	87 95       	ror	r24
     c76:	95 95       	asr	r25
     c78:	87 95       	ror	r24
     c7a:	95 95       	asr	r25
     c7c:	87 95       	ror	r24
     c7e:	95 95       	asr	r25
     c80:	87 95       	ror	r24
     c82:	8b 83       	std	Y+3, r24	; 0x03
	//get hours
	temp=twi_read_nack();
     c84:	0e 94 3e 07 	call	0xe7c	; 0xe7c <twi_read_nack>
	data.hour1=(temp & 0b00001111);
     c88:	98 2f       	mov	r25, r24
     c8a:	9f 70       	andi	r25, 0x0F	; 15
     c8c:	9c 83       	std	Y+4, r25	; 0x04
	data.hour10=((temp & 0b00110000)>>4);
     c8e:	80 73       	andi	r24, 0x30	; 48
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	95 95       	asr	r25
     c94:	87 95       	ror	r24
     c96:	95 95       	asr	r25
     c98:	87 95       	ror	r24
     c9a:	95 95       	asr	r25
     c9c:	87 95       	ror	r24
     c9e:	95 95       	asr	r25
     ca0:	87 95       	ror	r24
     ca2:	8d 83       	std	Y+5, r24	; 0x05
	
	twi_start((RTC<<1)+TWI_WRITE);
     ca4:	80 ed       	ldi	r24, 0xD0	; 208
     ca6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(0x04);
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	twi_start((RTC<<1)+TWI_READ);
     cb0:	81 ed       	ldi	r24, 0xD1	; 209
     cb2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	//get day
	temp=twi_read_ack();
     cb6:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
	data.day1=(temp & 0b00001111);
     cba:	98 2f       	mov	r25, r24
     cbc:	9f 70       	andi	r25, 0x0F	; 15
     cbe:	9e 83       	std	Y+6, r25	; 0x06
	data.day10=((temp & 0b00110000)>>4);
     cc0:	80 73       	andi	r24, 0x30	; 48
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	95 95       	asr	r25
     cc6:	87 95       	ror	r24
     cc8:	95 95       	asr	r25
     cca:	87 95       	ror	r24
     ccc:	95 95       	asr	r25
     cce:	87 95       	ror	r24
     cd0:	95 95       	asr	r25
     cd2:	87 95       	ror	r24
     cd4:	8f 83       	std	Y+7, r24	; 0x07
	//get month
	temp=twi_read_ack();
     cd6:	0e 94 34 07 	call	0xe68	; 0xe68 <twi_read_ack>
	data.month1=(temp & 0b00001111);
     cda:	98 2f       	mov	r25, r24
     cdc:	9f 70       	andi	r25, 0x0F	; 15
     cde:	98 87       	std	Y+8, r25	; 0x08
	data.month10=((temp & 0b00010000)>>4);
     ce0:	80 71       	andi	r24, 0x10	; 16
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	95 95       	asr	r25
     ce6:	87 95       	ror	r24
     ce8:	95 95       	asr	r25
     cea:	87 95       	ror	r24
     cec:	95 95       	asr	r25
     cee:	87 95       	ror	r24
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	89 87       	std	Y+9, r24	; 0x09
	//get year
	temp=twi_read_nack();
     cf6:	0e 94 3e 07 	call	0xe7c	; 0xe7c <twi_read_nack>
	data.year1=(temp & 0b00001111);
     cfa:	98 2f       	mov	r25, r24
     cfc:	9f 70       	andi	r25, 0x0F	; 15
     cfe:	9a 87       	std	Y+10, r25	; 0x0a
	data.year10=((temp & 0b11110000)>>4);
     d00:	82 95       	swap	r24
     d02:	8f 70       	andi	r24, 0x0F	; 15
     d04:	8b 87       	std	Y+11, r24	; 0x0b
	twi_stop();
     d06:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	//convert struct data to an array and return to the program
	myArray[0] = data.sec1;
     d0a:	88 81       	ld	r24, Y
	myArray[8] = data.month1;
	myArray[9] = data.month10;
	myArray[10] = data.year1;
	myArray[11] = data.year10;
	return *myArray;
}
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <setTimeDate>:

void setTimeDate(int *TimePoint) //this function reads the set time from the program and sends it to the RTC
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
twi_start((RTC<<1)+TWI_WRITE);
     d1a:	80 ed       	ldi	r24, 0xD0	; 208
     d1c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
twi_write(0x00);
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
//set seconds
twi_write(((*(TimePoint))  & 0b00001111)
     d26:	98 81       	ld	r25, Y
+((*(TimePoint+1)) & 0b00001111)<<4);
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
void setTimeDate(int *TimePoint) //this function reads the set time from the program and sends it to the RTC
{
twi_start((RTC<<1)+TWI_WRITE);
twi_write(0x00);
//set seconds
twi_write(((*(TimePoint))  & 0b00001111)
     d2a:	9f 70       	andi	r25, 0x0F	; 15
     d2c:	8f 70       	andi	r24, 0x0F	; 15
     d2e:	89 0f       	add	r24, r25
     d30:	82 95       	swap	r24
     d32:	80 7f       	andi	r24, 0xF0	; 240
     d34:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
+((*(TimePoint+1)) & 0b00001111)<<4);
//set minutes
twi_write(((*(TimePoint+2)) & 0b00001111)
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
+((*(TimePoint+3)) & 0b00001111)<<4);
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
twi_write(0x00);
//set seconds
twi_write(((*(TimePoint))  & 0b00001111)
+((*(TimePoint+1)) & 0b00001111)<<4);
//set minutes
twi_write(((*(TimePoint+2)) & 0b00001111)
     d3c:	9f 70       	andi	r25, 0x0F	; 15
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	89 0f       	add	r24, r25
     d42:	82 95       	swap	r24
     d44:	80 7f       	andi	r24, 0xF0	; 240
     d46:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
+((*(TimePoint+3)) & 0b00001111)<<4);
//set hour
twi_write(((*(TimePoint+4)) & 0b00001111)
     d4a:	98 85       	ldd	r25, Y+8	; 0x08
+((*(TimePoint+5)) & 0b00001111)<<4);
     d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
+((*(TimePoint+1)) & 0b00001111)<<4);
//set minutes
twi_write(((*(TimePoint+2)) & 0b00001111)
+((*(TimePoint+3)) & 0b00001111)<<4);
//set hour
twi_write(((*(TimePoint+4)) & 0b00001111)
     d4e:	9f 70       	andi	r25, 0x0F	; 15
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	89 0f       	add	r24, r25
     d54:	82 95       	swap	r24
     d56:	80 7f       	andi	r24, 0xF0	; 240
     d58:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
+((*(TimePoint+5)) & 0b00001111)<<4);

twi_start((RTC<<1)+TWI_WRITE);
     d5c:	80 ed       	ldi	r24, 0xD0	; 208
     d5e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
twi_write(0x04);
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
//set day
twi_write(((*(TimePoint+6)) & 0b00001111)
     d68:	9c 85       	ldd	r25, Y+12	; 0x0c
+((*(TimePoint+7)) & 0b00001111)<<4);
     d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
+((*(TimePoint+5)) & 0b00001111)<<4);

twi_start((RTC<<1)+TWI_WRITE);
twi_write(0x04);
//set day
twi_write(((*(TimePoint+6)) & 0b00001111)
     d6c:	9f 70       	andi	r25, 0x0F	; 15
     d6e:	8f 70       	andi	r24, 0x0F	; 15
     d70:	89 0f       	add	r24, r25
     d72:	82 95       	swap	r24
     d74:	80 7f       	andi	r24, 0xF0	; 240
     d76:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
+((*(TimePoint+7)) & 0b00001111)<<4);
//set month
twi_write(((*(TimePoint+8)) & 0b00001111)
     d7a:	98 89       	ldd	r25, Y+16	; 0x10
+((*(TimePoint+9)) & 0b00001111)<<4);
     d7c:	8a 89       	ldd	r24, Y+18	; 0x12
twi_write(0x04);
//set day
twi_write(((*(TimePoint+6)) & 0b00001111)
+((*(TimePoint+7)) & 0b00001111)<<4);
//set month
twi_write(((*(TimePoint+8)) & 0b00001111)
     d7e:	9f 70       	andi	r25, 0x0F	; 15
     d80:	8f 70       	andi	r24, 0x0F	; 15
     d82:	89 0f       	add	r24, r25
     d84:	82 95       	swap	r24
     d86:	80 7f       	andi	r24, 0xF0	; 240
     d88:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
+((*(TimePoint+9)) & 0b00001111)<<4);
//set year
twi_write(((*(TimePoint+10)) & 0b00001111)
     d8c:	9c 89       	ldd	r25, Y+20	; 0x14
+((*(TimePoint+11)) & 0b00001111)<<4);
     d8e:	8e 89       	ldd	r24, Y+22	; 0x16
+((*(TimePoint+7)) & 0b00001111)<<4);
//set month
twi_write(((*(TimePoint+8)) & 0b00001111)
+((*(TimePoint+9)) & 0b00001111)<<4);
//set year
twi_write(((*(TimePoint+10)) & 0b00001111)
     d90:	9f 70       	andi	r25, 0x0F	; 15
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	89 0f       	add	r24, r25
     d96:	82 95       	swap	r24
     d98:	80 7f       	andi	r24, 0xF0	; 240
     d9a:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
+((*(TimePoint+11)) & 0b00001111)<<4);
twi_stop();
     d9e:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
	
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <RTCsetup>:

void RTCsetup() //this function provides the initial setup for the RTC module
{
	twi_start((RTC<<1)+TWI_WRITE);
     da8:	80 ed       	ldi	r24, 0xD0	; 208
     daa:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(0x0E);
     dae:	8e e0       	ldi	r24, 0x0E	; 14
     db0:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set control register
	twi_write(0b01000000);
     db4:	80 e4       	ldi	r24, 0x40	; 64
     db6:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	
	twi_start((RTC<<1)+TWI_WRITE);
     dba:	80 ed       	ldi	r24, 0xD0	; 208
     dbc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(0x00);
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set seconds
	twi_write(0b00000000);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set minutes
	twi_write(0b00000000);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set hours
	twi_write(0b00000000);
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	
	twi_start((RTC<<1)+TWI_WRITE);
     dd8:	80 ed       	ldi	r24, 0xD0	; 208
     dda:	0e 94 0d 07 	call	0xe1a	; 0xe1a <twi_start>
	twi_write(0x04);
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set day 	
	twi_write(0b00000001);
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set month
	twi_write(0b00000001);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>
	//set year
	twi_write(0b00100001);
     df0:	81 e2       	ldi	r24, 0x21	; 33
     df2:	0e 94 2a 07 	call	0xe54	; 0xe54 <twi_write>

	twi_stop();
     df6:	0e 94 48 07 	call	0xe90	; 0xe90 <twi_stop>
     dfa:	08 95       	ret

00000dfc <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
     dfc:	87 b1       	in	r24, 0x07	; 7
     dfe:	8f 7c       	andi	r24, 0xCF	; 207
     e00:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
     e02:	88 b1       	in	r24, 0x08	; 8
     e04:	80 63       	ori	r24, 0x30	; 48
     e06:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
     e08:	e9 eb       	ldi	r30, 0xB9	; 185
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8c 7f       	andi	r24, 0xFC	; 252
     e10:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
     e12:	88 e9       	ldi	r24, 0x98	; 152
     e14:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     e18:	08 95       	ret

00000e1a <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     e1a:	94 ea       	ldi	r25, 0xA4	; 164
     e1c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
     e20:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e24:	99 23       	and	r25, r25
     e26:	e4 f7       	brge	.-8      	; 0xe20 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
     e28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
     e2c:	84 e8       	ldi	r24, 0x84	; 132
     e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
     e32:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e36:	88 23       	and	r24, r24
     e38:	e4 f7       	brge	.-8      	; 0xe32 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
     e3a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e3e:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
     e40:	88 31       	cpi	r24, 0x18	; 24
     e42:	21 f0       	breq	.+8      	; 0xe4c <twi_start+0x32>
     e44:	80 34       	cpi	r24, 0x40	; 64
     e46:	21 f4       	brne	.+8      	; 0xe50 <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	08 95       	ret
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
     e50:	81 e0       	ldi	r24, 0x01	; 1
    }
}
     e52:	08 95       	ret

00000e54 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
     e54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
     e58:	84 e8       	ldi	r24, 0x84	; 132
     e5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     e5e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e62:	88 23       	and	r24, r24
     e64:	e4 f7       	brge	.-8      	; 0xe5e <twi_write+0xa>
}
     e66:	08 95       	ret

00000e68 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
     e68:	84 ec       	ldi	r24, 0xC4	; 196
     e6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     e6e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e72:	88 23       	and	r24, r24
     e74:	e4 f7       	brge	.-8      	; 0xe6e <twi_read_ack+0x6>
    return (TWDR);
     e76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     e7a:	08 95       	ret

00000e7c <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
     e7c:	84 e8       	ldi	r24, 0x84	; 132
     e7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     e82:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e86:	88 23       	and	r24, r24
     e88:	e4 f7       	brge	.-8      	; 0xe82 <twi_read_nack+0x6>
    return (TWDR);
     e8a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     e8e:	08 95       	ret

00000e90 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     e90:	84 e9       	ldi	r24, 0x94	; 148
     e92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e96:	08 95       	ret

00000e98 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	ef 93       	push	r30
     eaa:	ff 93       	push	r31
     eac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     eb0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     eb4:	8c 71       	andi	r24, 0x1C	; 28
     eb6:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <UART_RxHead>
     eba:	ef 5f       	subi	r30, 0xFF	; 255
     ebc:	ef 71       	andi	r30, 0x1F	; 31
     ebe:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <UART_RxTail>
     ec2:	e9 17       	cp	r30, r25
     ec4:	39 f0       	breq	.+14     	; 0xed4 <__vector_18+0x3c>
     ec6:	e0 93 8c 01 	sts	0x018C, r30	; 0x80018c <UART_RxHead>
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	e1 57       	subi	r30, 0x71	; 113
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	20 83       	st	Z, r18
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <__vector_18+0x3e>
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <UART_LastRxError>
     eda:	89 2b       	or	r24, r25
     edc:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <UART_LastRxError>
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__vector_19>:
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
     f06:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <UART_TxHead>
     f0a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <UART_TxTail>
     f0e:	98 17       	cp	r25, r24
     f10:	69 f0       	breq	.+26     	; 0xf2c <__vector_19+0x38>
     f12:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <UART_TxTail>
     f16:	ef 5f       	subi	r30, 0xFF	; 255
     f18:	ef 71       	andi	r30, 0x1F	; 31
     f1a:	e0 93 8d 01 	sts	0x018D, r30	; 0x80018d <UART_TxTail>
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	e1 55       	subi	r30, 0x51	; 81
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	80 81       	ld	r24, Z
     f26:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <__vector_19+0x42>
     f2c:	e1 ec       	ldi	r30, 0xC1	; 193
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	80 83       	st	Z, r24
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <uart_init>:
     f48:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <UART_TxHead>
     f4c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <UART_TxTail>
     f50:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <UART_RxHead>
     f54:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <UART_RxTail>
     f58:	28 2f       	mov	r18, r24
     f5a:	39 2f       	mov	r19, r25
     f5c:	33 23       	and	r19, r19
     f5e:	1c f4       	brge	.+6      	; 0xf66 <uart_init+0x1e>
     f60:	22 e0       	ldi	r18, 0x02	; 2
     f62:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f66:	90 78       	andi	r25, 0x80	; 128
     f68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     f6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     f70:	88 e9       	ldi	r24, 0x98	; 152
     f72:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     f7c:	08 95       	ret

00000f7e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     f7e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <UART_TxHead>
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     f86:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <UART_TxTail>
     f8a:	29 17       	cp	r18, r25
     f8c:	e1 f3       	breq	.-8      	; 0xf86 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     f8e:	e2 2f       	mov	r30, r18
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	e1 55       	subi	r30, 0x51	; 81
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     f98:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     f9c:	e1 ec       	ldi	r30, 0xC1	; 193
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	80 83       	st	Z, r24
     fa6:	08 95       	ret

00000fa8 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
    while (*s)
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <uart_puts+0xe>
        uart_putc(*s++);
     fb0:	21 96       	adiw	r28, 0x01	; 1
     fb2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     fb6:	88 81       	ld	r24, Y
     fb8:	81 11       	cpse	r24, r1
     fba:	fa cf       	rjmp	.-12     	; 0xfb0 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <__subsf3>:
     fc2:	50 58       	subi	r21, 0x80	; 128

00000fc4 <__addsf3>:
     fc4:	bb 27       	eor	r27, r27
     fc6:	aa 27       	eor	r26, r26
     fc8:	0e 94 f9 07 	call	0xff2	; 0xff2 <__addsf3x>
     fcc:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_round>
     fd0:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscA>
     fd4:	38 f0       	brcs	.+14     	; 0xfe4 <__addsf3+0x20>
     fd6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_pscB>
     fda:	20 f0       	brcs	.+8      	; 0xfe4 <__addsf3+0x20>
     fdc:	39 f4       	brne	.+14     	; 0xfec <__addsf3+0x28>
     fde:	9f 3f       	cpi	r25, 0xFF	; 255
     fe0:	19 f4       	brne	.+6      	; 0xfe8 <__addsf3+0x24>
     fe2:	26 f4       	brtc	.+8      	; 0xfec <__addsf3+0x28>
     fe4:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__fp_nan>
     fe8:	0e f4       	brtc	.+2      	; 0xfec <__addsf3+0x28>
     fea:	e0 95       	com	r30
     fec:	e7 fb       	bst	r30, 7
     fee:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_inf>

00000ff2 <__addsf3x>:
     ff2:	e9 2f       	mov	r30, r25
     ff4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__fp_split3>
     ff8:	58 f3       	brcs	.-42     	; 0xfd0 <__addsf3+0xc>
     ffa:	ba 17       	cp	r27, r26
     ffc:	62 07       	cpc	r22, r18
     ffe:	73 07       	cpc	r23, r19
    1000:	84 07       	cpc	r24, r20
    1002:	95 07       	cpc	r25, r21
    1004:	20 f0       	brcs	.+8      	; 0x100e <__addsf3x+0x1c>
    1006:	79 f4       	brne	.+30     	; 0x1026 <__addsf3x+0x34>
    1008:	a6 f5       	brtc	.+104    	; 0x1072 <__addsf3x+0x80>
    100a:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_zero>
    100e:	0e f4       	brtc	.+2      	; 0x1012 <__addsf3x+0x20>
    1010:	e0 95       	com	r30
    1012:	0b 2e       	mov	r0, r27
    1014:	ba 2f       	mov	r27, r26
    1016:	a0 2d       	mov	r26, r0
    1018:	0b 01       	movw	r0, r22
    101a:	b9 01       	movw	r22, r18
    101c:	90 01       	movw	r18, r0
    101e:	0c 01       	movw	r0, r24
    1020:	ca 01       	movw	r24, r20
    1022:	a0 01       	movw	r20, r0
    1024:	11 24       	eor	r1, r1
    1026:	ff 27       	eor	r31, r31
    1028:	59 1b       	sub	r21, r25
    102a:	99 f0       	breq	.+38     	; 0x1052 <__addsf3x+0x60>
    102c:	59 3f       	cpi	r21, 0xF9	; 249
    102e:	50 f4       	brcc	.+20     	; 0x1044 <__addsf3x+0x52>
    1030:	50 3e       	cpi	r21, 0xE0	; 224
    1032:	68 f1       	brcs	.+90     	; 0x108e <__addsf3x+0x9c>
    1034:	1a 16       	cp	r1, r26
    1036:	f0 40       	sbci	r31, 0x00	; 0
    1038:	a2 2f       	mov	r26, r18
    103a:	23 2f       	mov	r18, r19
    103c:	34 2f       	mov	r19, r20
    103e:	44 27       	eor	r20, r20
    1040:	58 5f       	subi	r21, 0xF8	; 248
    1042:	f3 cf       	rjmp	.-26     	; 0x102a <__addsf3x+0x38>
    1044:	46 95       	lsr	r20
    1046:	37 95       	ror	r19
    1048:	27 95       	ror	r18
    104a:	a7 95       	ror	r26
    104c:	f0 40       	sbci	r31, 0x00	; 0
    104e:	53 95       	inc	r21
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__addsf3x+0x52>
    1052:	7e f4       	brtc	.+30     	; 0x1072 <__addsf3x+0x80>
    1054:	1f 16       	cp	r1, r31
    1056:	ba 0b       	sbc	r27, r26
    1058:	62 0b       	sbc	r22, r18
    105a:	73 0b       	sbc	r23, r19
    105c:	84 0b       	sbc	r24, r20
    105e:	ba f0       	brmi	.+46     	; 0x108e <__addsf3x+0x9c>
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	a1 f0       	breq	.+40     	; 0x108c <__addsf3x+0x9a>
    1064:	ff 0f       	add	r31, r31
    1066:	bb 1f       	adc	r27, r27
    1068:	66 1f       	adc	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	88 1f       	adc	r24, r24
    106e:	c2 f7       	brpl	.-16     	; 0x1060 <__addsf3x+0x6e>
    1070:	0e c0       	rjmp	.+28     	; 0x108e <__addsf3x+0x9c>
    1072:	ba 0f       	add	r27, r26
    1074:	62 1f       	adc	r22, r18
    1076:	73 1f       	adc	r23, r19
    1078:	84 1f       	adc	r24, r20
    107a:	48 f4       	brcc	.+18     	; 0x108e <__addsf3x+0x9c>
    107c:	87 95       	ror	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	b7 95       	ror	r27
    1084:	f7 95       	ror	r31
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	08 f0       	brcs	.+2      	; 0x108c <__addsf3x+0x9a>
    108a:	b0 cf       	rjmp	.-160    	; 0xfec <__addsf3+0x28>
    108c:	93 95       	inc	r25
    108e:	88 0f       	add	r24, r24
    1090:	08 f0       	brcs	.+2      	; 0x1094 <__addsf3x+0xa2>
    1092:	99 27       	eor	r25, r25
    1094:	ee 0f       	add	r30, r30
    1096:	97 95       	ror	r25
    1098:	87 95       	ror	r24
    109a:	08 95       	ret

0000109c <__divsf3>:
    109c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__divsf3x>
    10a0:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_round>
    10a4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_pscB>
    10a8:	58 f0       	brcs	.+22     	; 0x10c0 <__divsf3+0x24>
    10aa:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscA>
    10ae:	40 f0       	brcs	.+16     	; 0x10c0 <__divsf3+0x24>
    10b0:	29 f4       	brne	.+10     	; 0x10bc <__divsf3+0x20>
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <__divsf3+0x24>
    10b6:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_inf>
    10ba:	51 11       	cpse	r21, r1
    10bc:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_szero>
    10c0:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__fp_nan>

000010c4 <__divsf3x>:
    10c4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__fp_split3>
    10c8:	68 f3       	brcs	.-38     	; 0x10a4 <__divsf3+0x8>

000010ca <__divsf3_pse>:
    10ca:	99 23       	and	r25, r25
    10cc:	b1 f3       	breq	.-20     	; 0x10ba <__divsf3+0x1e>
    10ce:	55 23       	and	r21, r21
    10d0:	91 f3       	breq	.-28     	; 0x10b6 <__divsf3+0x1a>
    10d2:	95 1b       	sub	r25, r21
    10d4:	55 0b       	sbc	r21, r21
    10d6:	bb 27       	eor	r27, r27
    10d8:	aa 27       	eor	r26, r26
    10da:	62 17       	cp	r22, r18
    10dc:	73 07       	cpc	r23, r19
    10de:	84 07       	cpc	r24, r20
    10e0:	38 f0       	brcs	.+14     	; 0x10f0 <__divsf3_pse+0x26>
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	44 1f       	adc	r20, r20
    10ec:	aa 1f       	adc	r26, r26
    10ee:	a9 f3       	breq	.-22     	; 0x10da <__divsf3_pse+0x10>
    10f0:	35 d0       	rcall	.+106    	; 0x115c <__divsf3_pse+0x92>
    10f2:	0e 2e       	mov	r0, r30
    10f4:	3a f0       	brmi	.+14     	; 0x1104 <__divsf3_pse+0x3a>
    10f6:	e0 e8       	ldi	r30, 0x80	; 128
    10f8:	32 d0       	rcall	.+100    	; 0x115e <__divsf3_pse+0x94>
    10fa:	91 50       	subi	r25, 0x01	; 1
    10fc:	50 40       	sbci	r21, 0x00	; 0
    10fe:	e6 95       	lsr	r30
    1100:	00 1c       	adc	r0, r0
    1102:	ca f7       	brpl	.-14     	; 0x10f6 <__divsf3_pse+0x2c>
    1104:	2b d0       	rcall	.+86     	; 0x115c <__divsf3_pse+0x92>
    1106:	fe 2f       	mov	r31, r30
    1108:	29 d0       	rcall	.+82     	; 0x115c <__divsf3_pse+0x92>
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	bb 1f       	adc	r27, r27
    1112:	26 17       	cp	r18, r22
    1114:	37 07       	cpc	r19, r23
    1116:	48 07       	cpc	r20, r24
    1118:	ab 07       	cpc	r26, r27
    111a:	b0 e8       	ldi	r27, 0x80	; 128
    111c:	09 f0       	breq	.+2      	; 0x1120 <__divsf3_pse+0x56>
    111e:	bb 0b       	sbc	r27, r27
    1120:	80 2d       	mov	r24, r0
    1122:	bf 01       	movw	r22, r30
    1124:	ff 27       	eor	r31, r31
    1126:	93 58       	subi	r25, 0x83	; 131
    1128:	5f 4f       	sbci	r21, 0xFF	; 255
    112a:	3a f0       	brmi	.+14     	; 0x113a <__divsf3_pse+0x70>
    112c:	9e 3f       	cpi	r25, 0xFE	; 254
    112e:	51 05       	cpc	r21, r1
    1130:	78 f0       	brcs	.+30     	; 0x1150 <__divsf3_pse+0x86>
    1132:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_inf>
    1136:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_szero>
    113a:	5f 3f       	cpi	r21, 0xFF	; 255
    113c:	e4 f3       	brlt	.-8      	; 0x1136 <__divsf3_pse+0x6c>
    113e:	98 3e       	cpi	r25, 0xE8	; 232
    1140:	d4 f3       	brlt	.-12     	; 0x1136 <__divsf3_pse+0x6c>
    1142:	86 95       	lsr	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	b7 95       	ror	r27
    114a:	f7 95       	ror	r31
    114c:	9f 5f       	subi	r25, 0xFF	; 255
    114e:	c9 f7       	brne	.-14     	; 0x1142 <__divsf3_pse+0x78>
    1150:	88 0f       	add	r24, r24
    1152:	91 1d       	adc	r25, r1
    1154:	96 95       	lsr	r25
    1156:	87 95       	ror	r24
    1158:	97 f9       	bld	r25, 7
    115a:	08 95       	ret
    115c:	e1 e0       	ldi	r30, 0x01	; 1
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	88 1f       	adc	r24, r24
    1164:	bb 1f       	adc	r27, r27
    1166:	62 17       	cp	r22, r18
    1168:	73 07       	cpc	r23, r19
    116a:	84 07       	cpc	r24, r20
    116c:	ba 07       	cpc	r27, r26
    116e:	20 f0       	brcs	.+8      	; 0x1178 <__divsf3_pse+0xae>
    1170:	62 1b       	sub	r22, r18
    1172:	73 0b       	sbc	r23, r19
    1174:	84 0b       	sbc	r24, r20
    1176:	ba 0b       	sbc	r27, r26
    1178:	ee 1f       	adc	r30, r30
    117a:	88 f7       	brcc	.-30     	; 0x115e <__divsf3_pse+0x94>
    117c:	e0 95       	com	r30
    117e:	08 95       	ret

00001180 <__fixunssfsi>:
    1180:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__fp_splitA>
    1184:	88 f0       	brcs	.+34     	; 0x11a8 <__fixunssfsi+0x28>
    1186:	9f 57       	subi	r25, 0x7F	; 127
    1188:	98 f0       	brcs	.+38     	; 0x11b0 <__fixunssfsi+0x30>
    118a:	b9 2f       	mov	r27, r25
    118c:	99 27       	eor	r25, r25
    118e:	b7 51       	subi	r27, 0x17	; 23
    1190:	b0 f0       	brcs	.+44     	; 0x11be <__fixunssfsi+0x3e>
    1192:	e1 f0       	breq	.+56     	; 0x11cc <__fixunssfsi+0x4c>
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	1a f0       	brmi	.+6      	; 0x11a4 <__fixunssfsi+0x24>
    119e:	ba 95       	dec	r27
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__fixunssfsi+0x14>
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <__fixunssfsi+0x4c>
    11a4:	b1 30       	cpi	r27, 0x01	; 1
    11a6:	91 f0       	breq	.+36     	; 0x11cc <__fixunssfsi+0x4c>
    11a8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_zero>
    11ac:	b1 e0       	ldi	r27, 0x01	; 1
    11ae:	08 95       	ret
    11b0:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_zero>
    11b4:	67 2f       	mov	r22, r23
    11b6:	78 2f       	mov	r23, r24
    11b8:	88 27       	eor	r24, r24
    11ba:	b8 5f       	subi	r27, 0xF8	; 248
    11bc:	39 f0       	breq	.+14     	; 0x11cc <__fixunssfsi+0x4c>
    11be:	b9 3f       	cpi	r27, 0xF9	; 249
    11c0:	cc f3       	brlt	.-14     	; 0x11b4 <__fixunssfsi+0x34>
    11c2:	86 95       	lsr	r24
    11c4:	77 95       	ror	r23
    11c6:	67 95       	ror	r22
    11c8:	b3 95       	inc	r27
    11ca:	d9 f7       	brne	.-10     	; 0x11c2 <__fixunssfsi+0x42>
    11cc:	3e f4       	brtc	.+14     	; 0x11dc <__fixunssfsi+0x5c>
    11ce:	90 95       	com	r25
    11d0:	80 95       	com	r24
    11d2:	70 95       	com	r23
    11d4:	61 95       	neg	r22
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	08 95       	ret

000011de <__floatunsisf>:
    11de:	e8 94       	clt
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <__floatsisf+0x12>

000011e2 <__floatsisf>:
    11e2:	97 fb       	bst	r25, 7
    11e4:	3e f4       	brtc	.+14     	; 0x11f4 <__floatsisf+0x12>
    11e6:	90 95       	com	r25
    11e8:	80 95       	com	r24
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	99 23       	and	r25, r25
    11f6:	a9 f0       	breq	.+42     	; 0x1222 <__floatsisf+0x40>
    11f8:	f9 2f       	mov	r31, r25
    11fa:	96 e9       	ldi	r25, 0x96	; 150
    11fc:	bb 27       	eor	r27, r27
    11fe:	93 95       	inc	r25
    1200:	f6 95       	lsr	r31
    1202:	87 95       	ror	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	f1 11       	cpse	r31, r1
    120c:	f8 cf       	rjmp	.-16     	; 0x11fe <__floatsisf+0x1c>
    120e:	fa f4       	brpl	.+62     	; 0x124e <__floatsisf+0x6c>
    1210:	bb 0f       	add	r27, r27
    1212:	11 f4       	brne	.+4      	; 0x1218 <__floatsisf+0x36>
    1214:	60 ff       	sbrs	r22, 0
    1216:	1b c0       	rjmp	.+54     	; 0x124e <__floatsisf+0x6c>
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	16 c0       	rjmp	.+44     	; 0x124e <__floatsisf+0x6c>
    1222:	88 23       	and	r24, r24
    1224:	11 f0       	breq	.+4      	; 0x122a <__floatsisf+0x48>
    1226:	96 e9       	ldi	r25, 0x96	; 150
    1228:	11 c0       	rjmp	.+34     	; 0x124c <__floatsisf+0x6a>
    122a:	77 23       	and	r23, r23
    122c:	21 f0       	breq	.+8      	; 0x1236 <__floatsisf+0x54>
    122e:	9e e8       	ldi	r25, 0x8E	; 142
    1230:	87 2f       	mov	r24, r23
    1232:	76 2f       	mov	r23, r22
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <__floatsisf+0x5e>
    1236:	66 23       	and	r22, r22
    1238:	71 f0       	breq	.+28     	; 0x1256 <__floatsisf+0x74>
    123a:	96 e8       	ldi	r25, 0x86	; 134
    123c:	86 2f       	mov	r24, r22
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	2a f0       	brmi	.+10     	; 0x124e <__floatsisf+0x6c>
    1244:	9a 95       	dec	r25
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	88 1f       	adc	r24, r24
    124c:	da f7       	brpl	.-10     	; 0x1244 <__floatsisf+0x62>
    124e:	88 0f       	add	r24, r24
    1250:	96 95       	lsr	r25
    1252:	87 95       	ror	r24
    1254:	97 f9       	bld	r25, 7
    1256:	08 95       	ret

00001258 <__fp_inf>:
    1258:	97 f9       	bld	r25, 7
    125a:	9f 67       	ori	r25, 0x7F	; 127
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	08 95       	ret

00001264 <__fp_nan>:
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	80 ec       	ldi	r24, 0xC0	; 192
    1268:	08 95       	ret

0000126a <__fp_pscA>:
    126a:	00 24       	eor	r0, r0
    126c:	0a 94       	dec	r0
    126e:	16 16       	cp	r1, r22
    1270:	17 06       	cpc	r1, r23
    1272:	18 06       	cpc	r1, r24
    1274:	09 06       	cpc	r0, r25
    1276:	08 95       	ret

00001278 <__fp_pscB>:
    1278:	00 24       	eor	r0, r0
    127a:	0a 94       	dec	r0
    127c:	12 16       	cp	r1, r18
    127e:	13 06       	cpc	r1, r19
    1280:	14 06       	cpc	r1, r20
    1282:	05 06       	cpc	r0, r21
    1284:	08 95       	ret

00001286 <__fp_round>:
    1286:	09 2e       	mov	r0, r25
    1288:	03 94       	inc	r0
    128a:	00 0c       	add	r0, r0
    128c:	11 f4       	brne	.+4      	; 0x1292 <__fp_round+0xc>
    128e:	88 23       	and	r24, r24
    1290:	52 f0       	brmi	.+20     	; 0x12a6 <__fp_round+0x20>
    1292:	bb 0f       	add	r27, r27
    1294:	40 f4       	brcc	.+16     	; 0x12a6 <__fp_round+0x20>
    1296:	bf 2b       	or	r27, r31
    1298:	11 f4       	brne	.+4      	; 0x129e <__fp_round+0x18>
    129a:	60 ff       	sbrs	r22, 0
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <__fp_round+0x20>
    129e:	6f 5f       	subi	r22, 0xFF	; 255
    12a0:	7f 4f       	sbci	r23, 0xFF	; 255
    12a2:	8f 4f       	sbci	r24, 0xFF	; 255
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	08 95       	ret

000012a8 <__fp_split3>:
    12a8:	57 fd       	sbrc	r21, 7
    12aa:	90 58       	subi	r25, 0x80	; 128
    12ac:	44 0f       	add	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	59 f0       	breq	.+22     	; 0x12c8 <__fp_splitA+0x10>
    12b2:	5f 3f       	cpi	r21, 0xFF	; 255
    12b4:	71 f0       	breq	.+28     	; 0x12d2 <__fp_splitA+0x1a>
    12b6:	47 95       	ror	r20

000012b8 <__fp_splitA>:
    12b8:	88 0f       	add	r24, r24
    12ba:	97 fb       	bst	r25, 7
    12bc:	99 1f       	adc	r25, r25
    12be:	61 f0       	breq	.+24     	; 0x12d8 <__fp_splitA+0x20>
    12c0:	9f 3f       	cpi	r25, 0xFF	; 255
    12c2:	79 f0       	breq	.+30     	; 0x12e2 <__fp_splitA+0x2a>
    12c4:	87 95       	ror	r24
    12c6:	08 95       	ret
    12c8:	12 16       	cp	r1, r18
    12ca:	13 06       	cpc	r1, r19
    12cc:	14 06       	cpc	r1, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	f2 cf       	rjmp	.-28     	; 0x12b6 <__fp_split3+0xe>
    12d2:	46 95       	lsr	r20
    12d4:	f1 df       	rcall	.-30     	; 0x12b8 <__fp_splitA>
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <__fp_splitA+0x30>
    12d8:	16 16       	cp	r1, r22
    12da:	17 06       	cpc	r1, r23
    12dc:	18 06       	cpc	r1, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	f1 cf       	rjmp	.-30     	; 0x12c4 <__fp_splitA+0xc>
    12e2:	86 95       	lsr	r24
    12e4:	71 05       	cpc	r23, r1
    12e6:	61 05       	cpc	r22, r1
    12e8:	08 94       	sec
    12ea:	08 95       	ret

000012ec <__fp_zero>:
    12ec:	e8 94       	clt

000012ee <__fp_szero>:
    12ee:	bb 27       	eor	r27, r27
    12f0:	66 27       	eor	r22, r22
    12f2:	77 27       	eor	r23, r23
    12f4:	cb 01       	movw	r24, r22
    12f6:	97 f9       	bld	r25, 7
    12f8:	08 95       	ret

000012fa <__mulsf3>:
    12fa:	0e 94 90 09 	call	0x1320	; 0x1320 <__mulsf3x>
    12fe:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_round>
    1302:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscA>
    1306:	38 f0       	brcs	.+14     	; 0x1316 <__mulsf3+0x1c>
    1308:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_pscB>
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__mulsf3+0x1c>
    130e:	95 23       	and	r25, r21
    1310:	11 f0       	breq	.+4      	; 0x1316 <__mulsf3+0x1c>
    1312:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_inf>
    1316:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__fp_nan>
    131a:	11 24       	eor	r1, r1
    131c:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_szero>

00001320 <__mulsf3x>:
    1320:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__fp_split3>
    1324:	70 f3       	brcs	.-36     	; 0x1302 <__mulsf3+0x8>

00001326 <__mulsf3_pse>:
    1326:	95 9f       	mul	r25, r21
    1328:	c1 f3       	breq	.-16     	; 0x131a <__mulsf3+0x20>
    132a:	95 0f       	add	r25, r21
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	55 1f       	adc	r21, r21
    1330:	62 9f       	mul	r22, r18
    1332:	f0 01       	movw	r30, r0
    1334:	72 9f       	mul	r23, r18
    1336:	bb 27       	eor	r27, r27
    1338:	f0 0d       	add	r31, r0
    133a:	b1 1d       	adc	r27, r1
    133c:	63 9f       	mul	r22, r19
    133e:	aa 27       	eor	r26, r26
    1340:	f0 0d       	add	r31, r0
    1342:	b1 1d       	adc	r27, r1
    1344:	aa 1f       	adc	r26, r26
    1346:	64 9f       	mul	r22, r20
    1348:	66 27       	eor	r22, r22
    134a:	b0 0d       	add	r27, r0
    134c:	a1 1d       	adc	r26, r1
    134e:	66 1f       	adc	r22, r22
    1350:	82 9f       	mul	r24, r18
    1352:	22 27       	eor	r18, r18
    1354:	b0 0d       	add	r27, r0
    1356:	a1 1d       	adc	r26, r1
    1358:	62 1f       	adc	r22, r18
    135a:	73 9f       	mul	r23, r19
    135c:	b0 0d       	add	r27, r0
    135e:	a1 1d       	adc	r26, r1
    1360:	62 1f       	adc	r22, r18
    1362:	83 9f       	mul	r24, r19
    1364:	a0 0d       	add	r26, r0
    1366:	61 1d       	adc	r22, r1
    1368:	22 1f       	adc	r18, r18
    136a:	74 9f       	mul	r23, r20
    136c:	33 27       	eor	r19, r19
    136e:	a0 0d       	add	r26, r0
    1370:	61 1d       	adc	r22, r1
    1372:	23 1f       	adc	r18, r19
    1374:	84 9f       	mul	r24, r20
    1376:	60 0d       	add	r22, r0
    1378:	21 1d       	adc	r18, r1
    137a:	82 2f       	mov	r24, r18
    137c:	76 2f       	mov	r23, r22
    137e:	6a 2f       	mov	r22, r26
    1380:	11 24       	eor	r1, r1
    1382:	9f 57       	subi	r25, 0x7F	; 127
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	9a f0       	brmi	.+38     	; 0x13ae <__mulsf3_pse+0x88>
    1388:	f1 f0       	breq	.+60     	; 0x13c6 <__mulsf3_pse+0xa0>
    138a:	88 23       	and	r24, r24
    138c:	4a f0       	brmi	.+18     	; 0x13a0 <__mulsf3_pse+0x7a>
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	bb 1f       	adc	r27, r27
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	91 50       	subi	r25, 0x01	; 1
    139c:	50 40       	sbci	r21, 0x00	; 0
    139e:	a9 f7       	brne	.-22     	; 0x138a <__mulsf3_pse+0x64>
    13a0:	9e 3f       	cpi	r25, 0xFE	; 254
    13a2:	51 05       	cpc	r21, r1
    13a4:	80 f0       	brcs	.+32     	; 0x13c6 <__mulsf3_pse+0xa0>
    13a6:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__fp_inf>
    13aa:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_szero>
    13ae:	5f 3f       	cpi	r21, 0xFF	; 255
    13b0:	e4 f3       	brlt	.-8      	; 0x13aa <__mulsf3_pse+0x84>
    13b2:	98 3e       	cpi	r25, 0xE8	; 232
    13b4:	d4 f3       	brlt	.-12     	; 0x13aa <__mulsf3_pse+0x84>
    13b6:	86 95       	lsr	r24
    13b8:	77 95       	ror	r23
    13ba:	67 95       	ror	r22
    13bc:	b7 95       	ror	r27
    13be:	f7 95       	ror	r31
    13c0:	e7 95       	ror	r30
    13c2:	9f 5f       	subi	r25, 0xFF	; 255
    13c4:	c1 f7       	brne	.-16     	; 0x13b6 <__mulsf3_pse+0x90>
    13c6:	fe 2b       	or	r31, r30
    13c8:	88 0f       	add	r24, r24
    13ca:	91 1d       	adc	r25, r1
    13cc:	96 95       	lsr	r25
    13ce:	87 95       	ror	r24
    13d0:	97 f9       	bld	r25, 7
    13d2:	08 95       	ret

000013d4 <__udivmodsi4>:
    13d4:	a1 e2       	ldi	r26, 0x21	; 33
    13d6:	1a 2e       	mov	r1, r26
    13d8:	aa 1b       	sub	r26, r26
    13da:	bb 1b       	sub	r27, r27
    13dc:	fd 01       	movw	r30, r26
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <__udivmodsi4_ep>

000013e0 <__udivmodsi4_loop>:
    13e0:	aa 1f       	adc	r26, r26
    13e2:	bb 1f       	adc	r27, r27
    13e4:	ee 1f       	adc	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	a2 17       	cp	r26, r18
    13ea:	b3 07       	cpc	r27, r19
    13ec:	e4 07       	cpc	r30, r20
    13ee:	f5 07       	cpc	r31, r21
    13f0:	20 f0       	brcs	.+8      	; 0x13fa <__udivmodsi4_ep>
    13f2:	a2 1b       	sub	r26, r18
    13f4:	b3 0b       	sbc	r27, r19
    13f6:	e4 0b       	sbc	r30, r20
    13f8:	f5 0b       	sbc	r31, r21

000013fa <__udivmodsi4_ep>:
    13fa:	66 1f       	adc	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	88 1f       	adc	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	1a 94       	dec	r1
    1404:	69 f7       	brne	.-38     	; 0x13e0 <__udivmodsi4_loop>
    1406:	60 95       	com	r22
    1408:	70 95       	com	r23
    140a:	80 95       	com	r24
    140c:	90 95       	com	r25
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	bd 01       	movw	r22, r26
    1414:	cf 01       	movw	r24, r30
    1416:	08 95       	ret

00001418 <__divmodsi4>:
    1418:	05 2e       	mov	r0, r21
    141a:	97 fb       	bst	r25, 7
    141c:	1e f4       	brtc	.+6      	; 0x1424 <__divmodsi4+0xc>
    141e:	00 94       	com	r0
    1420:	0e 94 23 0a 	call	0x1446	; 0x1446 <__negsi2>
    1424:	57 fd       	sbrc	r21, 7
    1426:	07 d0       	rcall	.+14     	; 0x1436 <__divmodsi4_neg2>
    1428:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__udivmodsi4>
    142c:	07 fc       	sbrc	r0, 7
    142e:	03 d0       	rcall	.+6      	; 0x1436 <__divmodsi4_neg2>
    1430:	4e f4       	brtc	.+18     	; 0x1444 <__divmodsi4_exit>
    1432:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__negsi2>

00001436 <__divmodsi4_neg2>:
    1436:	50 95       	com	r21
    1438:	40 95       	com	r20
    143a:	30 95       	com	r19
    143c:	21 95       	neg	r18
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	4f 4f       	sbci	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255

00001444 <__divmodsi4_exit>:
    1444:	08 95       	ret

00001446 <__negsi2>:
    1446:	90 95       	com	r25
    1448:	80 95       	com	r24
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	08 95       	ret

00001456 <__tablejump2__>:
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	05 90       	lpm	r0, Z+
    145c:	f4 91       	lpm	r31, Z
    145e:	e0 2d       	mov	r30, r0
    1460:	09 94       	ijmp

00001462 <__ltoa_ncheck>:
    1462:	bb 27       	eor	r27, r27
    1464:	2a 30       	cpi	r18, 0x0A	; 10
    1466:	51 f4       	brne	.+20     	; 0x147c <__ltoa_ncheck+0x1a>
    1468:	99 23       	and	r25, r25
    146a:	42 f4       	brpl	.+16     	; 0x147c <__ltoa_ncheck+0x1a>
    146c:	bd e2       	ldi	r27, 0x2D	; 45
    146e:	90 95       	com	r25
    1470:	80 95       	com	r24
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__ultoa_common>

00001480 <__ultoa_ncheck>:
    1480:	bb 27       	eor	r27, r27

00001482 <__ultoa_common>:
    1482:	fa 01       	movw	r30, r20
    1484:	a6 2f       	mov	r26, r22
    1486:	62 17       	cp	r22, r18
    1488:	71 05       	cpc	r23, r1
    148a:	81 05       	cpc	r24, r1
    148c:	91 05       	cpc	r25, r1
    148e:	33 0b       	sbc	r19, r19
    1490:	30 fb       	bst	r19, 0
    1492:	66 f0       	brts	.+24     	; 0x14ac <__ultoa_common+0x2a>
    1494:	aa 27       	eor	r26, r26
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	aa 1f       	adc	r26, r26
    14a0:	a2 17       	cp	r26, r18
    14a2:	10 f0       	brcs	.+4      	; 0x14a8 <__ultoa_common+0x26>
    14a4:	a2 1b       	sub	r26, r18
    14a6:	63 95       	inc	r22
    14a8:	38 50       	subi	r19, 0x08	; 8
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <__ultoa_common+0x14>
    14ac:	a0 5d       	subi	r26, 0xD0	; 208
    14ae:	aa 33       	cpi	r26, 0x3A	; 58
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <__ultoa_common+0x32>
    14b2:	a9 5d       	subi	r26, 0xD9	; 217
    14b4:	a1 93       	st	Z+, r26
    14b6:	36 f7       	brtc	.-52     	; 0x1484 <__ultoa_common+0x2>
    14b8:	b1 11       	cpse	r27, r1
    14ba:	b1 93       	st	Z+, r27
    14bc:	10 82       	st	Z, r1
    14be:	ca 01       	movw	r24, r20
    14c0:	0c 94 95 0c 	jmp	0x192a	; 0x192a <strrev>

000014c4 <__utoa_ncheck>:
    14c4:	bb 27       	eor	r27, r27

000014c6 <__utoa_common>:
    14c6:	fb 01       	movw	r30, r22
    14c8:	55 27       	eor	r21, r21
    14ca:	aa 27       	eor	r26, r26
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	aa 1f       	adc	r26, r26
    14d2:	a4 17       	cp	r26, r20
    14d4:	10 f0       	brcs	.+4      	; 0x14da <__utoa_common+0x14>
    14d6:	a4 1b       	sub	r26, r20
    14d8:	83 95       	inc	r24
    14da:	50 51       	subi	r21, 0x10	; 16
    14dc:	b9 f7       	brne	.-18     	; 0x14cc <__utoa_common+0x6>
    14de:	a0 5d       	subi	r26, 0xD0	; 208
    14e0:	aa 33       	cpi	r26, 0x3A	; 58
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <__utoa_common+0x20>
    14e4:	a9 5d       	subi	r26, 0xD9	; 217
    14e6:	a1 93       	st	Z+, r26
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	79 f7       	brne	.-34     	; 0x14ca <__utoa_common+0x4>
    14ec:	b1 11       	cpse	r27, r1
    14ee:	b1 93       	st	Z+, r27
    14f0:	11 92       	st	Z+, r1
    14f2:	cb 01       	movw	r24, r22
    14f4:	0c 94 95 0c 	jmp	0x192a	; 0x192a <strrev>

000014f8 <sprintf>:
    14f8:	ae e0       	ldi	r26, 0x0E	; 14
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e2 e8       	ldi	r30, 0x82	; 130
    14fe:	fa e0       	ldi	r31, 0x0A	; 10
    1500:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__prologue_saves__+0x1c>
    1504:	0d 89       	ldd	r16, Y+21	; 0x15
    1506:	1e 89       	ldd	r17, Y+22	; 0x16
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	8c 83       	std	Y+4, r24	; 0x04
    150c:	1a 83       	std	Y+2, r17	; 0x02
    150e:	09 83       	std	Y+1, r16	; 0x01
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f e7       	ldi	r25, 0x7F	; 127
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	ae 01       	movw	r20, r28
    151a:	47 5e       	subi	r20, 0xE7	; 231
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	6f 89       	ldd	r22, Y+23	; 0x17
    1520:	78 8d       	ldd	r23, Y+24	; 0x18
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	0e 94 9e 0a 	call	0x153c	; 0x153c <vfprintf>
    152a:	ef 81       	ldd	r30, Y+7	; 0x07
    152c:	f8 85       	ldd	r31, Y+8	; 0x08
    152e:	e0 0f       	add	r30, r16
    1530:	f1 1f       	adc	r31, r17
    1532:	10 82       	st	Z, r1
    1534:	2e 96       	adiw	r28, 0x0e	; 14
    1536:	e4 e0       	ldi	r30, 0x04	; 4
    1538:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__epilogue_restores__+0x1c>

0000153c <vfprintf>:
    153c:	ab e0       	ldi	r26, 0x0B	; 11
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e4 ea       	ldi	r30, 0xA4	; 164
    1542:	fa e0       	ldi	r31, 0x0A	; 10
    1544:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__prologue_saves__>
    1548:	6c 01       	movw	r12, r24
    154a:	7b 01       	movw	r14, r22
    154c:	8a 01       	movw	r16, r20
    154e:	fc 01       	movw	r30, r24
    1550:	17 82       	std	Z+7, r1	; 0x07
    1552:	16 82       	std	Z+6, r1	; 0x06
    1554:	83 81       	ldd	r24, Z+3	; 0x03
    1556:	81 ff       	sbrs	r24, 1
    1558:	cc c1       	rjmp	.+920    	; 0x18f2 <vfprintf+0x3b6>
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	3c 01       	movw	r6, r24
    1560:	f6 01       	movw	r30, r12
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	f7 01       	movw	r30, r14
    1566:	93 fd       	sbrc	r25, 3
    1568:	85 91       	lpm	r24, Z+
    156a:	93 ff       	sbrs	r25, 3
    156c:	81 91       	ld	r24, Z+
    156e:	7f 01       	movw	r14, r30
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <vfprintf+0x3a>
    1574:	ba c1       	rjmp	.+884    	; 0x18ea <vfprintf+0x3ae>
    1576:	85 32       	cpi	r24, 0x25	; 37
    1578:	39 f4       	brne	.+14     	; 0x1588 <vfprintf+0x4c>
    157a:	93 fd       	sbrc	r25, 3
    157c:	85 91       	lpm	r24, Z+
    157e:	93 ff       	sbrs	r25, 3
    1580:	81 91       	ld	r24, Z+
    1582:	7f 01       	movw	r14, r30
    1584:	85 32       	cpi	r24, 0x25	; 37
    1586:	29 f4       	brne	.+10     	; 0x1592 <vfprintf+0x56>
    1588:	b6 01       	movw	r22, r12
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    1590:	e7 cf       	rjmp	.-50     	; 0x1560 <vfprintf+0x24>
    1592:	91 2c       	mov	r9, r1
    1594:	21 2c       	mov	r2, r1
    1596:	31 2c       	mov	r3, r1
    1598:	ff e1       	ldi	r31, 0x1F	; 31
    159a:	f3 15       	cp	r31, r3
    159c:	d8 f0       	brcs	.+54     	; 0x15d4 <vfprintf+0x98>
    159e:	8b 32       	cpi	r24, 0x2B	; 43
    15a0:	79 f0       	breq	.+30     	; 0x15c0 <vfprintf+0x84>
    15a2:	38 f4       	brcc	.+14     	; 0x15b2 <vfprintf+0x76>
    15a4:	80 32       	cpi	r24, 0x20	; 32
    15a6:	79 f0       	breq	.+30     	; 0x15c6 <vfprintf+0x8a>
    15a8:	83 32       	cpi	r24, 0x23	; 35
    15aa:	a1 f4       	brne	.+40     	; 0x15d4 <vfprintf+0x98>
    15ac:	23 2d       	mov	r18, r3
    15ae:	20 61       	ori	r18, 0x10	; 16
    15b0:	1d c0       	rjmp	.+58     	; 0x15ec <vfprintf+0xb0>
    15b2:	8d 32       	cpi	r24, 0x2D	; 45
    15b4:	61 f0       	breq	.+24     	; 0x15ce <vfprintf+0x92>
    15b6:	80 33       	cpi	r24, 0x30	; 48
    15b8:	69 f4       	brne	.+26     	; 0x15d4 <vfprintf+0x98>
    15ba:	23 2d       	mov	r18, r3
    15bc:	21 60       	ori	r18, 0x01	; 1
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <vfprintf+0xb0>
    15c0:	83 2d       	mov	r24, r3
    15c2:	82 60       	ori	r24, 0x02	; 2
    15c4:	38 2e       	mov	r3, r24
    15c6:	e3 2d       	mov	r30, r3
    15c8:	e4 60       	ori	r30, 0x04	; 4
    15ca:	3e 2e       	mov	r3, r30
    15cc:	2a c0       	rjmp	.+84     	; 0x1622 <vfprintf+0xe6>
    15ce:	f3 2d       	mov	r31, r3
    15d0:	f8 60       	ori	r31, 0x08	; 8
    15d2:	1d c0       	rjmp	.+58     	; 0x160e <vfprintf+0xd2>
    15d4:	37 fc       	sbrc	r3, 7
    15d6:	2d c0       	rjmp	.+90     	; 0x1632 <vfprintf+0xf6>
    15d8:	20 ed       	ldi	r18, 0xD0	; 208
    15da:	28 0f       	add	r18, r24
    15dc:	2a 30       	cpi	r18, 0x0A	; 10
    15de:	40 f0       	brcs	.+16     	; 0x15f0 <vfprintf+0xb4>
    15e0:	8e 32       	cpi	r24, 0x2E	; 46
    15e2:	b9 f4       	brne	.+46     	; 0x1612 <vfprintf+0xd6>
    15e4:	36 fc       	sbrc	r3, 6
    15e6:	81 c1       	rjmp	.+770    	; 0x18ea <vfprintf+0x3ae>
    15e8:	23 2d       	mov	r18, r3
    15ea:	20 64       	ori	r18, 0x40	; 64
    15ec:	32 2e       	mov	r3, r18
    15ee:	19 c0       	rjmp	.+50     	; 0x1622 <vfprintf+0xe6>
    15f0:	36 fe       	sbrs	r3, 6
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0xc4>
    15f4:	8a e0       	ldi	r24, 0x0A	; 10
    15f6:	98 9e       	mul	r9, r24
    15f8:	20 0d       	add	r18, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	92 2e       	mov	r9, r18
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <vfprintf+0xe6>
    1600:	ea e0       	ldi	r30, 0x0A	; 10
    1602:	2e 9e       	mul	r2, r30
    1604:	20 0d       	add	r18, r0
    1606:	11 24       	eor	r1, r1
    1608:	22 2e       	mov	r2, r18
    160a:	f3 2d       	mov	r31, r3
    160c:	f0 62       	ori	r31, 0x20	; 32
    160e:	3f 2e       	mov	r3, r31
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vfprintf+0xe6>
    1612:	8c 36       	cpi	r24, 0x6C	; 108
    1614:	21 f4       	brne	.+8      	; 0x161e <vfprintf+0xe2>
    1616:	83 2d       	mov	r24, r3
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	38 2e       	mov	r3, r24
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0xe6>
    161e:	88 36       	cpi	r24, 0x68	; 104
    1620:	41 f4       	brne	.+16     	; 0x1632 <vfprintf+0xf6>
    1622:	f7 01       	movw	r30, r14
    1624:	93 fd       	sbrc	r25, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	93 ff       	sbrs	r25, 3
    162a:	81 91       	ld	r24, Z+
    162c:	7f 01       	movw	r14, r30
    162e:	81 11       	cpse	r24, r1
    1630:	b3 cf       	rjmp	.-154    	; 0x1598 <vfprintf+0x5c>
    1632:	98 2f       	mov	r25, r24
    1634:	9f 7d       	andi	r25, 0xDF	; 223
    1636:	95 54       	subi	r25, 0x45	; 69
    1638:	93 30       	cpi	r25, 0x03	; 3
    163a:	28 f4       	brcc	.+10     	; 0x1646 <vfprintf+0x10a>
    163c:	0c 5f       	subi	r16, 0xFC	; 252
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	9f e3       	ldi	r25, 0x3F	; 63
    1642:	99 83       	std	Y+1, r25	; 0x01
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <vfprintf+0x124>
    1646:	83 36       	cpi	r24, 0x63	; 99
    1648:	31 f0       	breq	.+12     	; 0x1656 <vfprintf+0x11a>
    164a:	83 37       	cpi	r24, 0x73	; 115
    164c:	71 f0       	breq	.+28     	; 0x166a <vfprintf+0x12e>
    164e:	83 35       	cpi	r24, 0x53	; 83
    1650:	09 f0       	breq	.+2      	; 0x1654 <vfprintf+0x118>
    1652:	59 c0       	rjmp	.+178    	; 0x1706 <vfprintf+0x1ca>
    1654:	21 c0       	rjmp	.+66     	; 0x1698 <vfprintf+0x15c>
    1656:	f8 01       	movw	r30, r16
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e 5f       	subi	r16, 0xFE	; 254
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	88 24       	eor	r8, r8
    1662:	83 94       	inc	r8
    1664:	91 2c       	mov	r9, r1
    1666:	53 01       	movw	r10, r6
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <vfprintf+0x154>
    166a:	28 01       	movw	r4, r16
    166c:	f2 e0       	ldi	r31, 0x02	; 2
    166e:	4f 0e       	add	r4, r31
    1670:	51 1c       	adc	r5, r1
    1672:	f8 01       	movw	r30, r16
    1674:	a0 80       	ld	r10, Z
    1676:	b1 80       	ldd	r11, Z+1	; 0x01
    1678:	36 fe       	sbrs	r3, 6
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x146>
    167c:	69 2d       	mov	r22, r9
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x14a>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	c5 01       	movw	r24, r10
    1688:	0e 94 8a 0c 	call	0x1914	; 0x1914 <strnlen>
    168c:	4c 01       	movw	r8, r24
    168e:	82 01       	movw	r16, r4
    1690:	f3 2d       	mov	r31, r3
    1692:	ff 77       	andi	r31, 0x7F	; 127
    1694:	3f 2e       	mov	r3, r31
    1696:	16 c0       	rjmp	.+44     	; 0x16c4 <vfprintf+0x188>
    1698:	28 01       	movw	r4, r16
    169a:	22 e0       	ldi	r18, 0x02	; 2
    169c:	42 0e       	add	r4, r18
    169e:	51 1c       	adc	r5, r1
    16a0:	f8 01       	movw	r30, r16
    16a2:	a0 80       	ld	r10, Z
    16a4:	b1 80       	ldd	r11, Z+1	; 0x01
    16a6:	36 fe       	sbrs	r3, 6
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <vfprintf+0x174>
    16aa:	69 2d       	mov	r22, r9
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x178>
    16b0:	6f ef       	ldi	r22, 0xFF	; 255
    16b2:	7f ef       	ldi	r23, 0xFF	; 255
    16b4:	c5 01       	movw	r24, r10
    16b6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <strnlen_P>
    16ba:	4c 01       	movw	r8, r24
    16bc:	f3 2d       	mov	r31, r3
    16be:	f0 68       	ori	r31, 0x80	; 128
    16c0:	3f 2e       	mov	r3, r31
    16c2:	82 01       	movw	r16, r4
    16c4:	33 fc       	sbrc	r3, 3
    16c6:	1b c0       	rjmp	.+54     	; 0x16fe <vfprintf+0x1c2>
    16c8:	82 2d       	mov	r24, r2
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 16       	cp	r8, r24
    16ce:	99 06       	cpc	r9, r25
    16d0:	b0 f4       	brcc	.+44     	; 0x16fe <vfprintf+0x1c2>
    16d2:	b6 01       	movw	r22, r12
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    16dc:	2a 94       	dec	r2
    16de:	f4 cf       	rjmp	.-24     	; 0x16c8 <vfprintf+0x18c>
    16e0:	f5 01       	movw	r30, r10
    16e2:	37 fc       	sbrc	r3, 7
    16e4:	85 91       	lpm	r24, Z+
    16e6:	37 fe       	sbrs	r3, 7
    16e8:	81 91       	ld	r24, Z+
    16ea:	5f 01       	movw	r10, r30
    16ec:	b6 01       	movw	r22, r12
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    16f4:	21 10       	cpse	r2, r1
    16f6:	2a 94       	dec	r2
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	82 1a       	sub	r8, r18
    16fc:	91 08       	sbc	r9, r1
    16fe:	81 14       	cp	r8, r1
    1700:	91 04       	cpc	r9, r1
    1702:	71 f7       	brne	.-36     	; 0x16e0 <vfprintf+0x1a4>
    1704:	e8 c0       	rjmp	.+464    	; 0x18d6 <vfprintf+0x39a>
    1706:	84 36       	cpi	r24, 0x64	; 100
    1708:	11 f0       	breq	.+4      	; 0x170e <vfprintf+0x1d2>
    170a:	89 36       	cpi	r24, 0x69	; 105
    170c:	41 f5       	brne	.+80     	; 0x175e <vfprintf+0x222>
    170e:	f8 01       	movw	r30, r16
    1710:	37 fe       	sbrs	r3, 7
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <vfprintf+0x1e6>
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	0c 5f       	subi	r16, 0xFC	; 252
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	08 c0       	rjmp	.+16     	; 0x1732 <vfprintf+0x1f6>
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	07 2e       	mov	r0, r23
    1728:	00 0c       	add	r0, r0
    172a:	88 0b       	sbc	r24, r24
    172c:	99 0b       	sbc	r25, r25
    172e:	0e 5f       	subi	r16, 0xFE	; 254
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	f3 2d       	mov	r31, r3
    1734:	ff 76       	andi	r31, 0x6F	; 111
    1736:	3f 2e       	mov	r3, r31
    1738:	97 ff       	sbrs	r25, 7
    173a:	09 c0       	rjmp	.+18     	; 0x174e <vfprintf+0x212>
    173c:	90 95       	com	r25
    173e:	80 95       	com	r24
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	f0 68       	ori	r31, 0x80	; 128
    174c:	3f 2e       	mov	r3, r31
    174e:	2a e0       	ldi	r18, 0x0A	; 10
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	a3 01       	movw	r20, r6
    1754:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__ultoa_invert>
    1758:	88 2e       	mov	r8, r24
    175a:	86 18       	sub	r8, r6
    175c:	45 c0       	rjmp	.+138    	; 0x17e8 <vfprintf+0x2ac>
    175e:	85 37       	cpi	r24, 0x75	; 117
    1760:	31 f4       	brne	.+12     	; 0x176e <vfprintf+0x232>
    1762:	23 2d       	mov	r18, r3
    1764:	2f 7e       	andi	r18, 0xEF	; 239
    1766:	b2 2e       	mov	r11, r18
    1768:	2a e0       	ldi	r18, 0x0A	; 10
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	25 c0       	rjmp	.+74     	; 0x17b8 <vfprintf+0x27c>
    176e:	93 2d       	mov	r25, r3
    1770:	99 7f       	andi	r25, 0xF9	; 249
    1772:	b9 2e       	mov	r11, r25
    1774:	8f 36       	cpi	r24, 0x6F	; 111
    1776:	c1 f0       	breq	.+48     	; 0x17a8 <vfprintf+0x26c>
    1778:	18 f4       	brcc	.+6      	; 0x1780 <vfprintf+0x244>
    177a:	88 35       	cpi	r24, 0x58	; 88
    177c:	79 f0       	breq	.+30     	; 0x179c <vfprintf+0x260>
    177e:	b5 c0       	rjmp	.+362    	; 0x18ea <vfprintf+0x3ae>
    1780:	80 37       	cpi	r24, 0x70	; 112
    1782:	19 f0       	breq	.+6      	; 0x178a <vfprintf+0x24e>
    1784:	88 37       	cpi	r24, 0x78	; 120
    1786:	21 f0       	breq	.+8      	; 0x1790 <vfprintf+0x254>
    1788:	b0 c0       	rjmp	.+352    	; 0x18ea <vfprintf+0x3ae>
    178a:	e9 2f       	mov	r30, r25
    178c:	e0 61       	ori	r30, 0x10	; 16
    178e:	be 2e       	mov	r11, r30
    1790:	b4 fe       	sbrs	r11, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x272>
    1794:	fb 2d       	mov	r31, r11
    1796:	f4 60       	ori	r31, 0x04	; 4
    1798:	bf 2e       	mov	r11, r31
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <vfprintf+0x272>
    179c:	34 fe       	sbrs	r3, 4
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <vfprintf+0x278>
    17a0:	29 2f       	mov	r18, r25
    17a2:	26 60       	ori	r18, 0x06	; 6
    17a4:	b2 2e       	mov	r11, r18
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <vfprintf+0x278>
    17a8:	28 e0       	ldi	r18, 0x08	; 8
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x27c>
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x27c>
    17b4:	20 e1       	ldi	r18, 0x10	; 16
    17b6:	32 e0       	ldi	r19, 0x02	; 2
    17b8:	f8 01       	movw	r30, r16
    17ba:	b7 fe       	sbrs	r11, 7
    17bc:	07 c0       	rjmp	.+14     	; 0x17cc <vfprintf+0x290>
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0c 5f       	subi	r16, 0xFC	; 252
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <vfprintf+0x29c>
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 5f       	subi	r16, 0xFE	; 254
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	a3 01       	movw	r20, r6
    17da:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <__ultoa_invert>
    17de:	88 2e       	mov	r8, r24
    17e0:	86 18       	sub	r8, r6
    17e2:	fb 2d       	mov	r31, r11
    17e4:	ff 77       	andi	r31, 0x7F	; 127
    17e6:	3f 2e       	mov	r3, r31
    17e8:	36 fe       	sbrs	r3, 6
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <vfprintf+0x2ca>
    17ec:	23 2d       	mov	r18, r3
    17ee:	2e 7f       	andi	r18, 0xFE	; 254
    17f0:	a2 2e       	mov	r10, r18
    17f2:	89 14       	cp	r8, r9
    17f4:	58 f4       	brcc	.+22     	; 0x180c <vfprintf+0x2d0>
    17f6:	34 fe       	sbrs	r3, 4
    17f8:	0b c0       	rjmp	.+22     	; 0x1810 <vfprintf+0x2d4>
    17fa:	32 fc       	sbrc	r3, 2
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <vfprintf+0x2d4>
    17fe:	83 2d       	mov	r24, r3
    1800:	8e 7e       	andi	r24, 0xEE	; 238
    1802:	a8 2e       	mov	r10, r24
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x2d4>
    1806:	b8 2c       	mov	r11, r8
    1808:	a3 2c       	mov	r10, r3
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <vfprintf+0x2d6>
    180c:	b8 2c       	mov	r11, r8
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <vfprintf+0x2d6>
    1810:	b9 2c       	mov	r11, r9
    1812:	a4 fe       	sbrs	r10, 4
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <vfprintf+0x2f8>
    1816:	fe 01       	movw	r30, r28
    1818:	e8 0d       	add	r30, r8
    181a:	f1 1d       	adc	r31, r1
    181c:	80 81       	ld	r24, Z
    181e:	80 33       	cpi	r24, 0x30	; 48
    1820:	21 f4       	brne	.+8      	; 0x182a <vfprintf+0x2ee>
    1822:	9a 2d       	mov	r25, r10
    1824:	99 7e       	andi	r25, 0xE9	; 233
    1826:	a9 2e       	mov	r10, r25
    1828:	09 c0       	rjmp	.+18     	; 0x183c <vfprintf+0x300>
    182a:	a2 fe       	sbrs	r10, 2
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x2fe>
    182e:	b3 94       	inc	r11
    1830:	b3 94       	inc	r11
    1832:	04 c0       	rjmp	.+8      	; 0x183c <vfprintf+0x300>
    1834:	8a 2d       	mov	r24, r10
    1836:	86 78       	andi	r24, 0x86	; 134
    1838:	09 f0       	breq	.+2      	; 0x183c <vfprintf+0x300>
    183a:	b3 94       	inc	r11
    183c:	a3 fc       	sbrc	r10, 3
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <vfprintf+0x326>
    1840:	a0 fe       	sbrs	r10, 0
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <vfprintf+0x314>
    1844:	b2 14       	cp	r11, r2
    1846:	88 f4       	brcc	.+34     	; 0x186a <vfprintf+0x32e>
    1848:	28 0c       	add	r2, r8
    184a:	92 2c       	mov	r9, r2
    184c:	9b 18       	sub	r9, r11
    184e:	0e c0       	rjmp	.+28     	; 0x186c <vfprintf+0x330>
    1850:	b2 14       	cp	r11, r2
    1852:	60 f4       	brcc	.+24     	; 0x186c <vfprintf+0x330>
    1854:	b6 01       	movw	r22, r12
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    185e:	b3 94       	inc	r11
    1860:	f7 cf       	rjmp	.-18     	; 0x1850 <vfprintf+0x314>
    1862:	b2 14       	cp	r11, r2
    1864:	18 f4       	brcc	.+6      	; 0x186c <vfprintf+0x330>
    1866:	2b 18       	sub	r2, r11
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x332>
    186a:	98 2c       	mov	r9, r8
    186c:	21 2c       	mov	r2, r1
    186e:	a4 fe       	sbrs	r10, 4
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <vfprintf+0x356>
    1872:	b6 01       	movw	r22, r12
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    187c:	a2 fe       	sbrs	r10, 2
    187e:	17 c0       	rjmp	.+46     	; 0x18ae <vfprintf+0x372>
    1880:	a1 fc       	sbrc	r10, 1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <vfprintf+0x34e>
    1884:	88 e7       	ldi	r24, 0x78	; 120
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 c0       	rjmp	.+4      	; 0x188e <vfprintf+0x352>
    188a:	88 e5       	ldi	r24, 0x58	; 88
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	b6 01       	movw	r22, r12
    1890:	0c c0       	rjmp	.+24     	; 0x18aa <vfprintf+0x36e>
    1892:	8a 2d       	mov	r24, r10
    1894:	86 78       	andi	r24, 0x86	; 134
    1896:	59 f0       	breq	.+22     	; 0x18ae <vfprintf+0x372>
    1898:	a1 fe       	sbrs	r10, 1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x364>
    189c:	8b e2       	ldi	r24, 0x2B	; 43
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <vfprintf+0x366>
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	a7 fc       	sbrc	r10, 7
    18a4:	8d e2       	ldi	r24, 0x2D	; 45
    18a6:	b6 01       	movw	r22, r12
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    18ae:	89 14       	cp	r8, r9
    18b0:	38 f4       	brcc	.+14     	; 0x18c0 <vfprintf+0x384>
    18b2:	b6 01       	movw	r22, r12
    18b4:	80 e3       	ldi	r24, 0x30	; 48
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    18bc:	9a 94       	dec	r9
    18be:	f7 cf       	rjmp	.-18     	; 0x18ae <vfprintf+0x372>
    18c0:	8a 94       	dec	r8
    18c2:	f3 01       	movw	r30, r6
    18c4:	e8 0d       	add	r30, r8
    18c6:	f1 1d       	adc	r31, r1
    18c8:	80 81       	ld	r24, Z
    18ca:	b6 01       	movw	r22, r12
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    18d2:	81 10       	cpse	r8, r1
    18d4:	f5 cf       	rjmp	.-22     	; 0x18c0 <vfprintf+0x384>
    18d6:	22 20       	and	r2, r2
    18d8:	09 f4       	brne	.+2      	; 0x18dc <vfprintf+0x3a0>
    18da:	42 ce       	rjmp	.-892    	; 0x1560 <vfprintf+0x24>
    18dc:	b6 01       	movw	r22, r12
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 a5 0c 	call	0x194a	; 0x194a <fputc>
    18e6:	2a 94       	dec	r2
    18e8:	f6 cf       	rjmp	.-20     	; 0x18d6 <vfprintf+0x39a>
    18ea:	f6 01       	movw	r30, r12
    18ec:	86 81       	ldd	r24, Z+6	; 0x06
    18ee:	97 81       	ldd	r25, Z+7	; 0x07
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x3ba>
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	9f ef       	ldi	r25, 0xFF	; 255
    18f6:	2b 96       	adiw	r28, 0x0b	; 11
    18f8:	e2 e1       	ldi	r30, 0x12	; 18
    18fa:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__epilogue_restores__>

000018fe <strnlen_P>:
    18fe:	fc 01       	movw	r30, r24
    1900:	05 90       	lpm	r0, Z+
    1902:	61 50       	subi	r22, 0x01	; 1
    1904:	70 40       	sbci	r23, 0x00	; 0
    1906:	01 10       	cpse	r0, r1
    1908:	d8 f7       	brcc	.-10     	; 0x1900 <strnlen_P+0x2>
    190a:	80 95       	com	r24
    190c:	90 95       	com	r25
    190e:	8e 0f       	add	r24, r30
    1910:	9f 1f       	adc	r25, r31
    1912:	08 95       	ret

00001914 <strnlen>:
    1914:	fc 01       	movw	r30, r24
    1916:	61 50       	subi	r22, 0x01	; 1
    1918:	70 40       	sbci	r23, 0x00	; 0
    191a:	01 90       	ld	r0, Z+
    191c:	01 10       	cpse	r0, r1
    191e:	d8 f7       	brcc	.-10     	; 0x1916 <strnlen+0x2>
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	8e 0f       	add	r24, r30
    1926:	9f 1f       	adc	r25, r31
    1928:	08 95       	ret

0000192a <strrev>:
    192a:	dc 01       	movw	r26, r24
    192c:	fc 01       	movw	r30, r24
    192e:	67 2f       	mov	r22, r23
    1930:	71 91       	ld	r23, Z+
    1932:	77 23       	and	r23, r23
    1934:	e1 f7       	brne	.-8      	; 0x192e <strrev+0x4>
    1936:	32 97       	sbiw	r30, 0x02	; 2
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <strrev+0x18>
    193a:	7c 91       	ld	r23, X
    193c:	6d 93       	st	X+, r22
    193e:	70 83       	st	Z, r23
    1940:	62 91       	ld	r22, -Z
    1942:	ae 17       	cp	r26, r30
    1944:	bf 07       	cpc	r27, r31
    1946:	c8 f3       	brcs	.-14     	; 0x193a <strrev+0x10>
    1948:	08 95       	ret

0000194a <fputc>:
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	fb 01       	movw	r30, r22
    1954:	23 81       	ldd	r18, Z+3	; 0x03
    1956:	21 fd       	sbrc	r18, 1
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <fputc+0x16>
    195a:	8f ef       	ldi	r24, 0xFF	; 255
    195c:	9f ef       	ldi	r25, 0xFF	; 255
    195e:	2c c0       	rjmp	.+88     	; 0x19b8 <fputc+0x6e>
    1960:	22 ff       	sbrs	r18, 2
    1962:	16 c0       	rjmp	.+44     	; 0x1990 <fputc+0x46>
    1964:	46 81       	ldd	r20, Z+6	; 0x06
    1966:	57 81       	ldd	r21, Z+7	; 0x07
    1968:	24 81       	ldd	r18, Z+4	; 0x04
    196a:	35 81       	ldd	r19, Z+5	; 0x05
    196c:	42 17       	cp	r20, r18
    196e:	53 07       	cpc	r21, r19
    1970:	44 f4       	brge	.+16     	; 0x1982 <fputc+0x38>
    1972:	a0 81       	ld	r26, Z
    1974:	b1 81       	ldd	r27, Z+1	; 0x01
    1976:	9d 01       	movw	r18, r26
    1978:	2f 5f       	subi	r18, 0xFF	; 255
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	31 83       	std	Z+1, r19	; 0x01
    197e:	20 83       	st	Z, r18
    1980:	8c 93       	st	X, r24
    1982:	26 81       	ldd	r18, Z+6	; 0x06
    1984:	37 81       	ldd	r19, Z+7	; 0x07
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	37 83       	std	Z+7, r19	; 0x07
    198c:	26 83       	std	Z+6, r18	; 0x06
    198e:	14 c0       	rjmp	.+40     	; 0x19b8 <fputc+0x6e>
    1990:	8b 01       	movw	r16, r22
    1992:	ec 01       	movw	r28, r24
    1994:	fb 01       	movw	r30, r22
    1996:	00 84       	ldd	r0, Z+8	; 0x08
    1998:	f1 85       	ldd	r31, Z+9	; 0x09
    199a:	e0 2d       	mov	r30, r0
    199c:	09 95       	icall
    199e:	89 2b       	or	r24, r25
    19a0:	e1 f6       	brne	.-72     	; 0x195a <fputc+0x10>
    19a2:	d8 01       	movw	r26, r16
    19a4:	16 96       	adiw	r26, 0x06	; 6
    19a6:	8d 91       	ld	r24, X+
    19a8:	9c 91       	ld	r25, X
    19aa:	17 97       	sbiw	r26, 0x07	; 7
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	17 96       	adiw	r26, 0x07	; 7
    19b0:	9c 93       	st	X, r25
    19b2:	8e 93       	st	-X, r24
    19b4:	16 97       	sbiw	r26, 0x06	; 6
    19b6:	ce 01       	movw	r24, r28
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <__ultoa_invert>:
    19c2:	fa 01       	movw	r30, r20
    19c4:	aa 27       	eor	r26, r26
    19c6:	28 30       	cpi	r18, 0x08	; 8
    19c8:	51 f1       	breq	.+84     	; 0x1a1e <__ultoa_invert+0x5c>
    19ca:	20 31       	cpi	r18, 0x10	; 16
    19cc:	81 f1       	breq	.+96     	; 0x1a2e <__ultoa_invert+0x6c>
    19ce:	e8 94       	clt
    19d0:	6f 93       	push	r22
    19d2:	6e 7f       	andi	r22, 0xFE	; 254
    19d4:	6e 5f       	subi	r22, 0xFE	; 254
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8f 4f       	sbci	r24, 0xFF	; 255
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	af 4f       	sbci	r26, 0xFF	; 255
    19de:	b1 e0       	ldi	r27, 0x01	; 1
    19e0:	3e d0       	rcall	.+124    	; 0x1a5e <__ultoa_invert+0x9c>
    19e2:	b4 e0       	ldi	r27, 0x04	; 4
    19e4:	3c d0       	rcall	.+120    	; 0x1a5e <__ultoa_invert+0x9c>
    19e6:	67 0f       	add	r22, r23
    19e8:	78 1f       	adc	r23, r24
    19ea:	89 1f       	adc	r24, r25
    19ec:	9a 1f       	adc	r25, r26
    19ee:	a1 1d       	adc	r26, r1
    19f0:	68 0f       	add	r22, r24
    19f2:	79 1f       	adc	r23, r25
    19f4:	8a 1f       	adc	r24, r26
    19f6:	91 1d       	adc	r25, r1
    19f8:	a1 1d       	adc	r26, r1
    19fa:	6a 0f       	add	r22, r26
    19fc:	71 1d       	adc	r23, r1
    19fe:	81 1d       	adc	r24, r1
    1a00:	91 1d       	adc	r25, r1
    1a02:	a1 1d       	adc	r26, r1
    1a04:	20 d0       	rcall	.+64     	; 0x1a46 <__ultoa_invert+0x84>
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <__ultoa_invert+0x48>
    1a08:	68 94       	set
    1a0a:	3f 91       	pop	r19
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	26 9f       	mul	r18, r22
    1a10:	11 24       	eor	r1, r1
    1a12:	30 19       	sub	r19, r0
    1a14:	30 5d       	subi	r19, 0xD0	; 208
    1a16:	31 93       	st	Z+, r19
    1a18:	de f6       	brtc	.-74     	; 0x19d0 <__ultoa_invert+0xe>
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	08 95       	ret
    1a1e:	46 2f       	mov	r20, r22
    1a20:	47 70       	andi	r20, 0x07	; 7
    1a22:	40 5d       	subi	r20, 0xD0	; 208
    1a24:	41 93       	st	Z+, r20
    1a26:	b3 e0       	ldi	r27, 0x03	; 3
    1a28:	0f d0       	rcall	.+30     	; 0x1a48 <__ultoa_invert+0x86>
    1a2a:	c9 f7       	brne	.-14     	; 0x1a1e <__ultoa_invert+0x5c>
    1a2c:	f6 cf       	rjmp	.-20     	; 0x1a1a <__ultoa_invert+0x58>
    1a2e:	46 2f       	mov	r20, r22
    1a30:	4f 70       	andi	r20, 0x0F	; 15
    1a32:	40 5d       	subi	r20, 0xD0	; 208
    1a34:	4a 33       	cpi	r20, 0x3A	; 58
    1a36:	18 f0       	brcs	.+6      	; 0x1a3e <__ultoa_invert+0x7c>
    1a38:	49 5d       	subi	r20, 0xD9	; 217
    1a3a:	31 fd       	sbrc	r19, 1
    1a3c:	40 52       	subi	r20, 0x20	; 32
    1a3e:	41 93       	st	Z+, r20
    1a40:	02 d0       	rcall	.+4      	; 0x1a46 <__ultoa_invert+0x84>
    1a42:	a9 f7       	brne	.-22     	; 0x1a2e <__ultoa_invert+0x6c>
    1a44:	ea cf       	rjmp	.-44     	; 0x1a1a <__ultoa_invert+0x58>
    1a46:	b4 e0       	ldi	r27, 0x04	; 4
    1a48:	a6 95       	lsr	r26
    1a4a:	97 95       	ror	r25
    1a4c:	87 95       	ror	r24
    1a4e:	77 95       	ror	r23
    1a50:	67 95       	ror	r22
    1a52:	ba 95       	dec	r27
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__ultoa_invert+0x86>
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	61 05       	cpc	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	08 95       	ret
    1a5e:	9b 01       	movw	r18, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	0a 2e       	mov	r0, r26
    1a64:	06 94       	lsr	r0
    1a66:	57 95       	ror	r21
    1a68:	47 95       	ror	r20
    1a6a:	37 95       	ror	r19
    1a6c:	27 95       	ror	r18
    1a6e:	ba 95       	dec	r27
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__ultoa_invert+0xa2>
    1a72:	62 0f       	add	r22, r18
    1a74:	73 1f       	adc	r23, r19
    1a76:	84 1f       	adc	r24, r20
    1a78:	95 1f       	adc	r25, r21
    1a7a:	a0 1d       	adc	r26, r0
    1a7c:	08 95       	ret

00001a7e <__prologue_saves__>:
    1a7e:	2f 92       	push	r2
    1a80:	3f 92       	push	r3
    1a82:	4f 92       	push	r4
    1a84:	5f 92       	push	r5
    1a86:	6f 92       	push	r6
    1a88:	7f 92       	push	r7
    1a8a:	8f 92       	push	r8
    1a8c:	9f 92       	push	r9
    1a8e:	af 92       	push	r10
    1a90:	bf 92       	push	r11
    1a92:	cf 92       	push	r12
    1a94:	df 92       	push	r13
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	ca 1b       	sub	r28, r26
    1aa8:	db 0b       	sbc	r29, r27
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	09 94       	ijmp

00001ab6 <__epilogue_restores__>:
    1ab6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab8:	39 88       	ldd	r3, Y+17	; 0x11
    1aba:	48 88       	ldd	r4, Y+16	; 0x10
    1abc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1abe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ac0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ac2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac8:	b9 84       	ldd	r11, Y+9	; 0x09
    1aca:	c8 84       	ldd	r12, Y+8	; 0x08
    1acc:	df 80       	ldd	r13, Y+7	; 0x07
    1ace:	ee 80       	ldd	r14, Y+6	; 0x06
    1ad0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ad2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad8:	b9 81       	ldd	r27, Y+1	; 0x01
    1ada:	ce 0f       	add	r28, r30
    1adc:	d1 1d       	adc	r29, r1
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	ed 01       	movw	r28, r26
    1aea:	08 95       	ret

00001aec <_exit>:
    1aec:	f8 94       	cli

00001aee <__stop_program>:
    1aee:	ff cf       	rjmp	.-2      	; 0x1aee <__stop_program>
